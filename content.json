[{"title":"Learn Azure in 30 days #4 Azure Web App Service","slug":"Learn-Azure-in-30-days-4-Azure-Web-App-Service","date":"2017-12-22T14:49:15.000Z","updated":"2017-12-22T16:44:13.981Z","comments":true,"path":"2017/12/22/Learn-Azure-in-30-days-4-Azure-Web-App-Service/","link":"","permalink":"https://08alan.github.io/2017/12/22/Learn-Azure-in-30-days-4-Azure-Web-App-Service/","excerpt":"前言前篇文章針對訂閱帳戶(Subscription)的種類利用個人使用過的範例進行說明,接下來會開始利用IaaS建置Website、Storage、Database等服務開始進行Azure的使用 什麼是IaaS而什麼是IaaS呢,在這邊直接引用Azure Docs內的說明,非常的清楚易懂 基礎結構即服務 (IaaS) 是透過網際網路部署及管理的立即運算基礎結構。視需求快速地相應增加及減少，並只需支付所使用項目的費用。IaaS 讓您無須購買及管理自己的實體伺服器及其他資料中心基礎結構，避免其所產生的費用及複雜性。每個資源都作為獨立服務元件提供，而您只需要租用您所需要的項目，租用時間視您所需而定。當您購買、安裝、設定及管理自己的軟體 (包括作業系統、中介軟體與應用程式) 時，雲端服務提供者會管理基礎結構。","text":"前言前篇文章針對訂閱帳戶(Subscription)的種類利用個人使用過的範例進行說明,接下來會開始利用IaaS建置Website、Storage、Database等服務開始進行Azure的使用 什麼是IaaS而什麼是IaaS呢,在這邊直接引用Azure Docs內的說明,非常的清楚易懂 基礎結構即服務 (IaaS) 是透過網際網路部署及管理的立即運算基礎結構。視需求快速地相應增加及減少，並只需支付所使用項目的費用。IaaS 讓您無須購買及管理自己的實體伺服器及其他資料中心基礎結構，避免其所產生的費用及複雜性。每個資源都作為獨立服務元件提供，而您只需要租用您所需要的項目，租用時間視您所需而定。當您購買、安裝、設定及管理自己的軟體 (包括作業系統、中介軟體與應用程式) 時，雲端服務提供者會管理基礎結構。上述的說明若還是不夠明瞭,較簡白利用我所理解的方式說明一次IaaS就是我們只需要利用Azure Portal開立服務並且透過屬性設置能夠快速的建置出環境所需的服務,簡化IT團隊在實體環境建置上的痛苦,這也是雲端優勢之一,把服務交給雲端提供者即可! (圖片來源:azure.microsoft.com/zh-tw/overview/what-is-iaas/) 創一台Web App Service吧為了展示IaaS的便利性我們本篇直接創建一個Web App Service並且利用FTP、IDE(整合開發工具)來做網站的手動部署,在這邊我們先不介紹Web App Service詳細功能,而是直接火力展示到底創一台Web AP有多簡單快速 流程1.利用Azure Portal 建立Web App Service2.建置一個預設的ASP.NET MVC網頁應用程式3.利用FTP將網站放置到Web App Service4.利用Visual Studio發行網站到Web App Service5.運行網站 1.利用Azure Portal 建立Web App Service當你擁有Azure訂閱帳戶後,即可在Azure官網首頁右上角點選入口網站進行登入,並且開始使用Azure Portal我個人是習慣直接打網址https://portal.azure.com/進入後點選新增&gt;搜尋Web App&gt;點選Web應用程式&gt;建立輸入應用程式名稱,選取訂閱帳戶,創建資源群組,選取定價層,存放位置&gt;建立等待資源建立執行URL&gt;完成!實際操作第一個流程創建總花費時間不到5分鐘其實這樣火力展示環境架設已經很猛了,不過我們還是依照流程繼續將網站放置到Azure Web App Service上 2.建置一個預設的ASP.NET MVC網頁應用程式Visual Studio創建ASP.NET MVC網頁應用程式,並且本地端執行無誤 3.利用FTP將網站放置到Web App Service連線至FTP位置並將網頁應用程式檔案放置wwwroot目錄底下完成,網頁可以跑了! 4.利用Visual Studio發行網站到Web App Service在專案名稱上按下右鍵&gt;選擇發行&gt;選擇Azure Web App Service&gt;發行選擇訂閱帳戶&gt;資源群組&gt;選取資源群組下的Azure Web App Service&gt;確定發行完成,網頁可以跑了 總結在上面的操作過程之中若熟悉流程整個建置不花費超過10分鐘,比起在地端自行架設環境準備Server實在節省太多人力與時間成本,只需要綁個Domain即可讓網站快速上線,這也是為什麼我拿Web App Service來展示Azure Portal火力的原因下一篇文章來詳細介紹一下Web App Service於Azure Portal上還能做什麼設置","categories":[],"tags":[{"name":"Azure","slug":"Azure","permalink":"https://08alan.github.io/tags/Azure/"},{"name":"鐵人賽","slug":"鐵人賽","permalink":"https://08alan.github.io/tags/鐵人賽/"}]},{"title":"Learn Azure in 30 days #3 Azure Subscription","slug":"Learn-Azure-in-30-days-3-Azure-Subscription","date":"2017-12-21T08:30:05.000Z","updated":"2017-12-22T14:50:18.000Z","comments":true,"path":"2017/12/21/Learn-Azure-in-30-days-3-Azure-Subscription/","link":"","permalink":"https://08alan.github.io/2017/12/21/Learn-Azure-in-30-days-3-Azure-Subscription/","excerpt":"Azure Subscription進入鐵人賽第三天,開始針對Azure各種服務進行說明,也許會有些業配也說不定 其實會從訂閱帳戶開始也是有原因的,\b不久之前幾位好友因為時常討教Azure的問題 我們創建了一個Line Group,接著開始邀請加入,若您不嫌吵,也歡迎加入討論的行列 經常看到尚未開始卻想了解Azure的朋友,醒醒吧你沒有女友(更正,醒醒吧你沒有帳戶) \b其實訂閱帳戶相關的說明若自行查詢可能會以為只是一個微軟帳戶後啟用免費層即可,其實還有更大的Discount, 這一篇是利用目前對訂閱帳戶的了解協助各位能夠已最經濟實惠的價格且合適訂閱方式來使用Azure,並不是業配","text":"Azure Subscription進入鐵人賽第三天,開始針對Azure各種服務進行說明,也許會有些業配也說不定 其實會從訂閱帳戶開始也是有原因的,\b不久之前幾位好友因為時常討教Azure的問題 我們創建了一個Line Group,接著開始邀請加入,若您不嫌吵,也歡迎加入討論的行列 經常看到尚未開始卻想了解Azure的朋友,醒醒吧你沒有女友(更正,醒醒吧你沒有帳戶) \b其實訂閱帳戶相關的說明若自行查詢可能會以為只是一個微軟帳戶後啟用免費層即可,其實還有更大的Discount, 這一篇是利用目前對訂閱帳戶的了解協助各位能夠已最經濟實惠的價格且合適訂閱方式來使用Azure,並不是業配 訂閱帳戶種類目前Azure Subscription分為以下幾種模式 免費層 Free trial 隨用即付 Pay as you go 企業訂閱 Enterprise \bAIO Azure in open Microsoft Partner CSP 除了免費層以及Pay as you go都建議你直接找CSP進行 在這邊就不在演示創建帳戶的過程了,通常創建帳戶僅需要下一步下一步並填寫信用卡資訊即可,我認為直接拿實際案例截圖可能會比較有參考價值,實際來看看使用範例吧 使用範例以我個人使用過的帳戶為例, 評估時期使用新創建免費6000額度,用完即扔或是直接升等帳戶當然你Mail多也可以一直創建帳號測試服務,非常划算! 評估過後的小專案(每月帳單約2000NTD)採用隨用即付,也就是從免費層升級上來後利用信用卡付款而服務中等的公司(每月帳單約15000NTD)採用AIO,約兩個月要除值10個License公司內部導入若有Enterprise則直接聯繫Partner協助導入即可 總結其實並不是最大的優惠就是最適合的方案,從上面的案例來說我會用不同的訂閱模式進行不同的專案舉例來說Azure in open若點數不足,相關的服務將被停用,重啟相關服務也是需要耗掉不少精力而若案例內每個月僅需要不高的額度,卻時常需要關心點數非常擾人,就能夠參考Pay as you go訂閱方案","categories":[],"tags":[{"name":"Azure","slug":"Azure","permalink":"https://08alan.github.io/tags/Azure/"},{"name":"鐵人賽","slug":"鐵人賽","permalink":"https://08alan.github.io/tags/鐵人賽/"}]},{"title":"Learn Azure in 30 days #2 為何選擇Azure","slug":"Learn-Azure-in-30-days-2-為何選擇Azure","date":"2017-12-20T02:17:09.000Z","updated":"2017-12-22T14:50:15.792Z","comments":true,"path":"2017/12/20/Learn-Azure-in-30-days-2-為何選擇Azure/","link":"","permalink":"https://08alan.github.io/2017/12/20/Learn-Azure-in-30-days-2-為何選擇Azure/","excerpt":"為何選擇Azure? 本來想直接進入主題開始發一大堆Azure功能介紹文章,但我認為評估導入與技術考量都比不上說服老闆買單實際,所以就在開賽第二天舉了導入Azure的栗子與過程,給觀看文章的朋友參考看看 公司內部使用雲端技術需要多方面的需求評估以及長官的支持(Budget&amp;&amp;分析報告) 而我們之所以會選擇雲端服務是因為公司內的業務發展主要於美、歐、杜拜、印度等海外地區 遙想剛進入VIVOTEK的時候,我們的官網採用ASP.NET Webform加上自建機房的Server 你可以想像著每當海外User點擊你的網頁,接著發出一個Request連到台灣,在回應到遙遠的彼方 一來封包不安全以外,服務連線的效能也大大的縮減網站使用的品質 (圖片來源:https://www.qa-knowhow.com/?p=792)","text":"為何選擇Azure? 本來想直接進入主題開始發一大堆Azure功能介紹文章,但我認為評估導入與技術考量都比不上說服老闆買單實際,所以就在開賽第二天舉了導入Azure的栗子與過程,給觀看文章的朋友參考看看 公司內部使用雲端技術需要多方面的需求評估以及長官的支持(Budget&amp;&amp;分析報告) 而我們之所以會選擇雲端服務是因為公司內的業務發展主要於美、歐、杜拜、印度等海外地區 遙想剛進入VIVOTEK的時候,我們的官網採用ASP.NET Webform加上自建機房的Server 你可以想像著每當海外User點擊你的網頁,接著發出一個Request連到台灣,在回應到遙遠的彼方 一來封包不安全以外,服務連線的效能也大大的縮減網站使用的品質 (圖片來源:https://www.qa-knowhow.com/?p=792)\b綜合以上問題讓單位內不時收到來自國外無法連線,或者是Timeout的Server端Error, 甚至是經常發生台灣海纜不穩定、駭客DDOS癱瘓網路,導致外部連線異常等等的特殊情況 於是乎我們選擇了AWS,沒錯是AWS,針對網站架構我們開設了EC2,S3,RDS...等資源 並將webform網站部署於EC2,而其餘的形象官網則放在S3上執行 (目前除了網站之外產品的雲端服務還是架構於AWS之上) 接著是評估時的網站架構: ASP.NET Webform SQL Server Database Storage(含全靜態網站,css、javascript圖片、檔案下載等等) 再導入初期一切都非常美好,的確海外的客戶也減少了大量連線品質的抱怨,But!問題來了 因為機器放置在美東,台灣的內部使用者開始嫌網站很慢,連線異常EC2與我們自建機房其實沒有多大的差別,而且VM價格不便宜,所以我們的價層很低前人開始將部分含有後端程式碼Code通通改寫為靜態html並且放置到S3上(然後他們就離職了..WTF)原先由Key User利用後台維護的資料,變成開發團隊瘋狂改靜態官網的大量工作 綜合以上原因,經過分析報告與經費申請,我們開始將尚未改為靜態的ASP.NET Webform網站逐步部署至Azure上並進行觀察 開始後發現ASP.NET與Azure不僅有Portal快速地進行部屬的設置,Visual Studio也能夠直接將程式deploy於Azure上頭 這加快了開發人員上線時,不需要遠端到低階VM進行上線流程,我們建置的速度比預估更是節省了非常大的時間與人力 文中服務還在Azure努力的撐著,撐到我們改寫完畢:)此Webform所用到的Azure 資源 Azure Web App Service Azure Storage Azure SQL Database Azure Redis Cache Azure Application Insights 剛剛所提到被改為靜態網站的使用者\bga分佈圖 實際上的request數量 總結其實各家技術並不是因為信仰而決定導入,我們應該針對專案或人力來選擇最適合的服務,依照以上案例來說該公司IT比較習慣使用Microsoft Solution,加上微軟對於文件,社群,\b\bPartner等等的計畫,讓遇到問題的我們能夠快速的解決問題,這也是我們為何採用Azure重要的原因之一從下一篇文章開始,我會朝著各種服務的建置逐步進行撰寫,透過建置的過程將觀念釐清","categories":[],"tags":[{"name":"Azure","slug":"Azure","permalink":"https://08alan.github.io/tags/Azure/"},{"name":"鐵人賽","slug":"鐵人賽","permalink":"https://08alan.github.io/tags/鐵人賽/"}]},{"title":"Learn Azure in 30 days #1 放輕鬆開賽","slug":"Learn-Azuer-in-30-days-1-放輕鬆開賽","date":"2017-12-19T10:05:48.000Z","updated":"2017-12-22T14:50:32.426Z","comments":true,"path":"2017/12/19/Learn-Azuer-in-30-days-1-放輕鬆開賽/","link":"","permalink":"https://08alan.github.io/2017/12/19/Learn-Azuer-in-30-days-1-放輕鬆開賽/","excerpt":"輕鬆開賽~先別談技術,聊聊吧嗨,大家好~打給後~ 又參加了IT邦幫忙鐵人賽 連續三屆參加鐵人賽盛會,我想我一定是瘋了之類的 XD 事實上一直到活動資訊出來前,腦袋中總是突然有個邪惡的聲音傳出: 12今年沒有鐵人賽的話那就明年再參加吧,年底是專案最忙碌的時期,還要辦社群大型活動恩！就這樣決定了! 逃避著逃避著~就發現第九屆的鐵人賽官網出爐了,接著協助小財神分享活動資訊於Study4.TW粉絲專頁, 原以為這樣就功德圓滿,能夠撒花坐等各大好手系列文章準備好好充電一番了(握拳 殊不知只要\b參加過社群活動就會有一群熱血的社群好友,無論如何都會施展推坑無極限,再不瘋狂就等死,@#!#!%#%$#% 等等的特殊招式QwQ 直接將邪惡的小惡魔一腳踢落於無底之中,一股熱血滿腔湧來之類的~ 於是乎我們立刻開團2018新年快樂並且於FB上開始招募前往偉大航道的夥伴(別人推我入坑,怎能不拉著一些夥伴下海呢 你說是吧XDD)","text":"輕鬆開賽~先別談技術,聊聊吧嗨,大家好~打給後~ 又參加了IT邦幫忙鐵人賽 連續三屆參加鐵人賽盛會,我想我一定是瘋了之類的 XD 事實上一直到活動資訊出來前,腦袋中總是突然有個邪惡的聲音傳出: 12今年沒有鐵人賽的話那就明年再參加吧,年底是專案最忙碌的時期,還要辦社群大型活動恩！就這樣決定了! 逃避著逃避著~就發現第九屆的鐵人賽官網出爐了,接著協助小財神分享活動資訊於Study4.TW粉絲專頁, 原以為這樣就功德圓滿,能夠撒花坐等各大好手系列文章準備好好充電一番了(握拳 殊不知只要\b參加過社群活動就會有一群熱血的社群好友,無論如何都會施展推坑無極限,再不瘋狂就等死,@#!#!%#%$#% 等等的特殊招式QwQ 直接將邪惡的小惡魔一腳踢落於無底之中,一股熱血滿腔湧來之類的~ 於是乎我們立刻開團2018新年快樂並且於FB上開始招募前往偉大航道的夥伴(別人推我入坑,怎能不拉著一些夥伴下海呢 你說是吧XDD) 會參加鐵人賽的原因除了社群好友的推坑之外,主要原因是為未來工作轉移做準備,Coder-&gt;Clouder(暫且翻譯為雲上隨時會摔落的人吧LOL) 所以為了學好一門技術,或是強迫自己去深入學習,對我而言最快的系統化學習方式絕對是寫文章!好文分享-91-我為什麼鼓勵工程師寫blog 其次希望能夠靠著這一次參加鐵人賽的文章的學習過程能夠成功獲取Microsoft Azure相關認證,不過考證照好貴 嗚嗚 影片也是決定參加的原因之一,今年鐵人賽宣傳非常盛大,不同於以往宣傳模式,還有歷屆得獎者錄製的鐵人賽宣傳影片 真的每一位前輩都句句說到心坎裡,透過學習的過程最後取得完賽,那種完成後的成就感,真的太痛快了 推坑隊友區參加鐵人賽的原因有一半是我醒來才發現的之外(或是說事後再來安慰欺騙自己也行 XD 必須感謝我的隊友於是特地撰寫此區塊,HightLight並且提醒大家交友要慎選(誤,我愛大家 事發當時,我努力敲打著鍵盤,胡亂塗抹即將上線的需求,接著收到一則FB標記通知,就參加了,沒了就這樣(前面到底是廢話什麼我的老天鵝 根本騙字數啊) 隊友清單來也:若對於主題有興趣的朋友也歡迎熱情按下訂閱幫我們打氣,完全不需要客氣喲 團長Alan Tsai \bData Science 到底是什麼 - 從一個完全外行角度來看 Wellwind Angular Material完全攻略 Duran Hsieh SQL Server 學習日誌 gary_lin React.js &amp; Laravel 30天訓練 superpucy 從工程師的角度看UX/UI awws 半路出家的工程師重新認識 JavaScript rabbitlai 工程師職災的認識與預防 bymiachang Data Science with Azure 900pro 在Mac上開發.Net Core alan.liu Learn Azuer in 30 days 未開賽先開始團隊合作近幾年鐵人賽的參賽方式有不少型式上的變動,從之前的分組競賽開始,到今年的組團參賽, 除了自我勉勵以外,還能跟靠隊友的提醒與霸凌來玩賽&lt;-如果因個人原因團隊參賽失敗將要被PO上FB標記轉貼分享轉貼分享,還要請客吃慶功宴 組團對於我來說真是能夠大大的增進完賽的成功率阿XDD,接下來談談我們開賽時的溝通和提醒模式吧 Slack我們使用Slack當作群組通訊軟體,利用訊息與Poll投票來決議團隊的命名或溝通方式,重要文件與連結的標記不過考量到部分人員上班較少使用Slack,目前正在投票票選Messager or Line等等 Online ExcelExcel真的是文書神器,搭配Office365轉為線上版本,用來手動填寫進度以及相關資料的收集最重要的是要求大家留下電話聯絡方式,方便奪命連環摳,以免團隊失敗 聊完惹 回顧完賽(茶…老了需要回顧過去RRR其實我還想PO很多張參加鐵人賽頒獎的相關圖片…不過這樣首篇也太長了吧XDD那就來張去年的歡樂照,明年我們頒獎典禮見!祝各位鐵人都能順利完賽 &lt;3","categories":[],"tags":[{"name":"Azure","slug":"Azure","permalink":"https://08alan.github.io/tags/Azure/"},{"name":"鐵人賽","slug":"鐵人賽","permalink":"https://08alan.github.io/tags/鐵人賽/"}]},{"title":"VSCode-關於Transifex在地化翻譯","slug":"VSCode-關於Transifex在地化翻譯","date":"2017-09-21T09:00:09.000Z","updated":"2017-09-21T17:01:16.000Z","comments":true,"path":"2017/09/21/VSCode-關於Transifex在地化翻譯/","link":"","permalink":"https://08alan.github.io/2017/09/21/VSCode-關於Transifex在地化翻譯/","excerpt":"前陣子與幾位社群好友一同參加了由Taiwan R User Group所舉辦的社群活動主題非常特別 Microsoft MSDN on Open­ Source由微軟總部三位講者分享如何透過Github與第三方平台Transifex進行軟體在地化翻譯翻譯的主角為Visual Studio Code,你沒聽錯是 VSCode! 12345//你是否常常被開發工具的中文誤導?//你是否因被誤導而造成不可挽回的錯誤?//你是否因經驗而練就了某些文字說明不清,卻能夠知道問題出在哪裡? 現在我們能夠利用Transifex解決以上問題,能自己幫VSCode翻譯是不是很酷!一起來進行軟體在地化翻譯吧!","text":"前陣子與幾位社群好友一同參加了由Taiwan R User Group所舉辦的社群活動主題非常特別 Microsoft MSDN on Open­ Source由微軟總部三位講者分享如何透過Github與第三方平台Transifex進行軟體在地化翻譯翻譯的主角為Visual Studio Code,你沒聽錯是 VSCode! 12345//你是否常常被開發工具的中文誤導?//你是否因被誤導而造成不可挽回的錯誤?//你是否因經驗而練就了某些文字說明不清,卻能夠知道問題出在哪裡? 現在我們能夠利用Transifex解決以上問題,能自己幫VSCode翻譯是不是很酷!一起來進行軟體在地化翻譯吧! 為什麼會撰寫這篇文章呢?經由幾位社群好友共同貢獻數個月,有許多尚未翻譯或翻譯不貼切的文字皆已修正,VSCode內建多種不同技術的專有名詞,導致關鍵字數量龐大,憑著少數人是無法有效的針對VSCode進行非常精確的整合翻譯,於是將翻譯流程寫成文章,期望有更多人一同對軟體在地化貢獻 :) 讓我們開始吧此次微軟使用Transifex第三方平台進行www.transifex.com進入官網後您也能夠創建自己或公司需要翻譯的項目(收費性質) 登入及註冊SSO註冊的方式非常適合開發者(看到Github就按讚XD)Github,Google,Linkedin,Facebook,Twitter每一位開發人員應該都有Github帳號吧 真是太貼心了除了Github外還包含各大社群網絡能夠進行註冊 瀏覽專案登入註冊完畢之後按下瀏覽並加入專案(這是最多人詢問的流程,瀏覽看不太出來是尋找專案的功能)操作流程如下圖: 專案清單接著是加入的專案清單相較剛開始翻譯時,Microsoft又釋出更多不同軟體的專案可以針對需要翻譯的項目進行選取 若您時常進行微軟項目的翻譯可以將Microsoft組織連結加入我的最愛之後需要翻譯時能夠快速地進入專案清單,不需要再經過多次點選囉連結:www.transifex.com/microsoft-oss/ 儀表板專案清單內含儀表板,能夠快速的檢閱幾個月以來的翻譯情況從圖片能夠看到從於五、六月份約提供了1000多項的翻譯 開始翻譯首先點選左邊的專案項目,儀表板會更新成為該項目的數據,並且在儀表板下方可以點選翻譯(Hover) \b我們使用vscode-editor專案進行介紹個人習慣是直接點選全部資源,並且在翻譯的時候稍微喵一下項目以防止在不同的項目內時常有相同的英文不相同的翻譯 通常收到通知有新的翻譯要進行,直接點選未翻譯能夠快速找到尚待翻譯的文字如果你想修改特定相關文字,也能透過搜尋找到相對應的翻譯,並且提議修改你建議的文字 小技巧與注意事項 翻譯檢驗由微軟進行 Transifex只要加入專案後,進行翻譯非常簡單,平台也很好上手但如果遭人隨意翻譯,整個平台文字應該會大亂,於是微軟針對翻譯的審核增加一道關卡&gt;委外查驗,藉此做到翻譯文字的檢查. 提交與投票 如何才能將翻譯提交呢?\bAns:只要看不順眼不管是否未翻譯或是已完成 直接填寫並保存即可至於投票的部分,如果認可成員的翻譯 直接點下投票,平台會抓取最多票數或最少2票進行提交審閱,但是我們不能夠阻止其他成員的投票就是了…(有時不適當的翻譯文字卻是最高票) 小工具分享 進行翻譯的當下,可能會遇到非常多令人混淆或辭意不清的語句,或是你知道英文卻不知道怎麼翻譯成專有名詞時,在這邊提供一個微軟的服務(原本長得很醜,寫這篇文章時發現UI重新打造了!!WOW 令人驚艷,不過操作起來舊版網站比較能清楚看到結果qq)語言網站入口-搜尋詞彙 意外的驚喜-能夠在VSCode上看到自己名字也太爽了吧 !!!最後分享一下Visual Studio Code Release Note上的Thanks區塊,如果您的翻譯達到一定程度或數量,微軟會提供相關證書,並且將你的名字直接印在ReleaseNote上能夠在經常使用的開發工具上看到自己名字 實在是非常非常的過癮,一起成為軟體在地化貢獻者吧!!!","categories":[],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://08alan.github.io/tags/VSCode/"}]},{"title":"SQLServer-隱藏字元導致查詢失誤","slug":"SQLServer-隱藏字元導致查詢失誤","date":"2017-06-20T08:05:48.000Z","updated":"2017-06-20T10:06:15.000Z","comments":true,"path":"2017/06/20/SQLServer-隱藏字元導致查詢失誤/","link":"","permalink":"https://08alan.github.io/2017/06/20/SQLServer-隱藏字元導致查詢失誤/","excerpt":"一般來說撰寫與資料庫串接的程式碼,進行Debug時通常會使用Query的方式來進行資料的比對,若沒有特殊情況,我們很少會對這種臨時性的資料查詢,實作測試語法,也就是說在進行比對的同時我們利用的身體部位大多數為[&quot;眼&quot;,&quot;腦&quot;,&quot;手&quot;] (大腦很好用,但前提是你要__)大腦很好用,前提是你要看到真實的數值,這次的異常原因是文字在資料表內多了字元長度,在SSMS上肉眼無法發現,我想是當初寫入時的資料不知道從哪個工具複製導致 因此案例為SQL Insert 方式寫入,目前僅利用資料處理排除此異常,並無考量使用者介面的輸入","text":"一般來說撰寫與資料庫串接的程式碼,進行Debug時通常會使用Query的方式來進行資料的比對,若沒有特殊情況,我們很少會對這種臨時性的資料查詢,實作測試語法,也就是說在進行比對的同時我們利用的身體部位大多數為[&quot;眼&quot;,&quot;腦&quot;,&quot;手&quot;] (大腦很好用,但前提是你要__)大腦很好用,前提是你要看到真實的數值,這次的異常原因是文字在資料表內多了字元長度,在SSMS上肉眼無法發現,我想是當初寫入時的資料不知道從哪個工具複製導致 因此案例為SQL Insert 方式寫入,目前僅利用資料處理排除此異常,並無考量使用者介面的輸入 我們依照截圖來重現此次案例 1.首先我們比對一下上下兩個查詢 除非你有天眼通,我想正常人都是看到一模一樣的字串 12345SELECT * FROM [BandwidthSetting] WHERE [Compression] = 'MJPEG' and [Resolution] = '704x480' and [FPS] = '1' and [Quality] = N'\bExcellent'SELECT * FROM [BandwidthSetting] WHERE [Compression] = 'MJPEG' and [Resolution] = '704x480' and [FPS] = '1' AND [Quality] = N'Excellent' 2.進行查詢 發現上方的查詢能夠查詢到資料,下方則是無法查詢到資料也就是說程式使用了下方的查詢導致回傳的資料列為空 3.猜測問題 依照筆者以往維護ADO.NET的程式經驗,這種問題不是字元編碼就是Table欄位設置為char導致,仔細看看上方的查詢,過程中已經發現是Excellent這個字元導致故在前方加了個N代表轉換編碼,hmm…結果相同接著確認一下欄位格式是否正確無誤hmm…欄位無誤※設置為char會導致字元若比欄位長度短自動補空格 4.將查詢失誤SQL使用Like查詢 12SELECT * FROM [BandwidthSetting] WHERE [Compression] = 'MJPEG' and [Resolution] = '704x480' and [FPS] = '1' AND [Quality] LIKE '%Excellent%' 資料出現了,立即猜測為字元長度或有看不見的文字導致 5.將該欄位轉為字元二進制查看 發現字元長度並非相同! 12SELECT *,Quality,CONVERT(VARBINARY, [Quality]) AS CharBINARYFROM BandwidthSetting WHERE Compression LIKE '%alantest%' 暗藏殺機 使用Visual Studio Code 來查看TSQL的些微差距,我們將該字串反白發現上方字元貌似多包涵了一格,使用&lt;-back刪除發現好像有刪除到一個字元,於SSMS則是完全無法觀察出來,此情況在excel或其他office工具上貌似經常發生(xml格式)…猜測當時應該是由該處複製導致異常 結論 解決方式非常簡單,僅須將異常字串直接update為正確字元即可","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"Azure Storage設置CacheControl","slug":"Azure-AzureStorageSetCacheControl","date":"2017-06-10T04:59:51.000Z","updated":"2017-06-20T08:13:24.000Z","comments":true,"path":"2017/06/10/Azure-AzureStorageSetCacheControl/","link":"","permalink":"https://08alan.github.io/2017/06/10/Azure-AzureStorageSetCacheControl/","excerpt":"前言 此篇筆記是為了特殊需求故更改Storage CacheControl屬性設置,藉此達成設置CDN檔案保留及自動清除的客制調整時間,若您的設置的時間比CDN預設的時間更短,1234//很重要講三次//有可能導致Storage因為資料交換頻繁而導致的額外收費//有可能導致Storage因為資料交換頻繁而導致的額外收費//有可能導致Storage因為資料交換頻繁而導致的額外收費 概要: 1.關於CacheControl 2.Azure Storage Explorer 設置方式 3.利用C#設置Azure Storage CacheControl 4.利用Azure PowerShell 設置Azure Storage CacheControl","text":"前言 此篇筆記是為了特殊需求故更改Storage CacheControl屬性設置,藉此達成設置CDN檔案保留及自動清除的客制調整時間,若您的設置的時間比CDN預設的時間更短,1234//很重要講三次//有可能導致Storage因為資料交換頻繁而導致的額外收費//有可能導致Storage因為資料交換頻繁而導致的額外收費//有可能導致Storage因為資料交換頻繁而導致的額外收費 概要: 1.關於CacheControl 2.Azure Storage Explorer 設置方式 3.利用C#設置Azure Storage CacheControl 4.利用Azure PowerShell 設置Azure Storage CacheControl 1.關於CacheControl 緩存是CDN的關鍵功能,CDN目的是為了讓使用者能夠就近存取檔案,當散佈完成後的檔案將會存在世界各地,而我們得控制這些檔案預設存在多久才會回到Storage重新進行抓取對於此說明我們僅描述帶過…接著專注設置方式若您想對CacheControl或CDN有更深入的了解可以參考以下連結Cache response header的屬性說明Azure CDN locations參考連結dev akamaiManage expiration of Azure Storage blobs in Azure CDN 2.利用Azure Storage Explorer進行CacheControl設置 Azure Storage Explorer 是微軟推出Azure Storage GUI工具,若您僅有正常的使用需求,絕對推薦此官方軟體,方便快速而且免費！缺點是若有極大量的檔案要進行處理,可能無法批次作業.進入介面後進行連線,就能以檔案總管的方式瀏覽Azure Storage內容接著點選您想要設置屬性的檔案按下右鍵即可設置 3.利用C#設置Azure Storage CacheControl 開發環境 Azure SDKs:v2.9 Visual Studio 2017 update:20170519 Nuget套件安裝123//Nuget installPM&gt;Install-Package WindowsAzure.StoragePM&gt;Install-Package Microsoft.WindowsAzure.ConfigurationManager NameSpace12using Microsoft.WindowsAzure.Storage; // Namespace for CloudStorageAccountusing Microsoft.WindowsAzure.Storage.Blob; // Namespace for Blob storage types 主要程式碼1234567891011121314151617181920212223242526// Retrieve storage account from connection string.CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);// Create the blob client.CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();// Retrieve reference to a previously created container.CloudBlobContainer container = blobClient.GetContainerReference(&quot;downloadfile&quot;);// Loop over items within the container and output the length and URI.foreach (IListBlobItem item in container.ListBlobs(null, true))&#123; try &#123; string myItemEndPoint = item.Uri.ToString().Replace(&quot;https://YourStorageAccountName.blob.core.windows.net/YourBlobServiceContainerName/&quot;, &quot;&quot;); CloudBlob blob = container.GetBlobReference(myItemEndPoint); blob.Properties.CacheControl = &quot;public,max-age=18000&quot;;//3600/H blob.SetProperties(); Console.WriteLine(myItemEndPoint); &#125; catch (Exception) &#123; Console.WriteLine(&quot;can&apos;t find&quot;); &#125;&#125; @Github Azure PowerShell 設置方式 1234567891011121314151617181920212223$storage_account = \"&lt;Your storage account&gt;\"$storage_key = \"&lt;Your storage key&gt;\"$container_name = \"&lt;Your container name&gt;\"$second = \"&lt;max-age parameter ex : 3389 (mean 3389 second)&gt;\" $context = New-AzureStorageContext -StorageAccountName $storage_account -StorageAccountKey $storage_key # Get a reference to the blob$blobs = Get-AzureStorageBlob -Context $context -Container $container_name For($i = 0 ; $i -lt $blobs.count ; $i++)&#123; $blob = $blobs[$i] # Set the CacheControl property to expire in 1 hour (3600 seconds) $blob.ICloudBlob.Properties.CacheControl = \"public, max-age=\"+$second # Send the update to the cloud $blob.ICloudBlob.SetProperties()&#125; 若您想要排程處理 可以利用Azure function app使用 Azure Functions 排程程式碼執行 結論 此案例雖然已與對方說明CDN使用方式及價格可能會升高…對於執意要做也是百般無奈,小弟還是建議採預設更新檔案時Purge進行正規流程較佳以上筆記供參考","categories":[],"tags":[{"name":"Azure","slug":"Azure","permalink":"https://08alan.github.io/tags/Azure/"}]},{"title":".NET Core-加入類別庫及測試專案","slug":"NETCore-新增及加入測試專案","date":"2017-06-03T06:29:39.000Z","updated":"2017-06-04T08:33:09.000Z","comments":true,"path":"2017/06/03/NETCore-新增及加入測試專案/","link":"","permalink":"https://08alan.github.io/2017/06/03/NETCore-新增及加入測試專案/","excerpt":"以往於Windows底下使用Visual Studio加入類別參考,測試專案等僅需輕輕鬆鬆的點擊GUI即可加入,對於CLI的操作說白了就是不熟,抗拒,痛苦…然而逃避雖可恥但該還的還是得還Orz年初換了台Mac,Visual Studio for Mac還在RC的階段,屏除使用Windows建置後利用github Clone到Mac上運行只好利用CLI來進行新增專案, 此篇將介紹如何利用dotnet CLI將dotnet core類別庫與測試專案加入至目前專案之中","text":"以往於Windows底下使用Visual Studio加入類別參考,測試專案等僅需輕輕鬆鬆的點擊GUI即可加入,對於CLI的操作說白了就是不熟,抗拒,痛苦…然而逃避雖可恥但該還的還是得還Orz年初換了台Mac,Visual Studio for Mac還在RC的階段,屏除使用Windows建置後利用github Clone到Mac上運行只好利用CLI來進行新增專案, 此篇將介紹如何利用dotnet CLI將dotnet core類別庫與測試專案加入至目前專案之中 開發環境: Macbook pro touchbar dotnet core 2.0.0 preview Visual studio Code 下載方式: dotnet core SDKdotnet core preview 建置流程 1.新增一個Classlib類別庫 2.建置方案並將類別庫加入方案內 3.建立測試專案(mstest||xunit) 4.將專案檔加入測試專案參考 5.建置主專案範本(可利用現有來加入類別庫與測試) 6.將類別庫加入主專案 7.執行測試專案與主專案 建立方案檔Dotnet new sln [yourSolutionName] 建立類別庫Dotnet new classlib -o alancore -o參數將lib放置生成位置利用dotnet new classlib -h觀看一下dotnet CLI 參數意義 如果沒有加入-o參數會出現異常訊息Invalid input switch輸入的路由位置無效 接著看一下classlib內利用dotnet CLI建置出來的目錄 bin,obj csproj專案檔 class1.cs csproj1234567&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt;&lt;/Project&gt; class1.cs12345678using System;namespace alancorelib&#123; public class Class1 &#123; &#125;&#125; 在撰寫這篇文章的同時是dotnet standard2.0剛推出的時期,開發環境目前安裝的版本為dotnet core 2.0 preview若您想使用不同版本的dotnet standard(dotnet core 1.X.X版本)可以在新建時利用-f參數選取不同的dotnet standard版本(EX:1.X~1.6) 將類別庫加入至專案內Dotnet sln add alancore/alancorelib.csproj 加入完畢後可以看到sln方案檔內包含新增project相關資訊Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;alancorelib&quot;, &quot;alancorelib\\alancorelib.csproj&quot;, &quot;{1B3678D5-F2C5-4F4D-980A-B7FFA552672D}&quot; 加入完畢進行還原dotnet restore 建置測試專案dotnet new mstest -o alancoremstest 將測試專案加入專案內dotnet sln add alancoremstest/alancoremstest.csproj 加入完畢進行還原dotnet restore 新建一個主專案範本在此template使用Dotnet Core WebApp - MVCdotnet new mvc -o alancoremvc ByTheWay內建的專案範本清單: 將主專案範本加入專案內dotnet sln add alancoremvc/alancoremvc.csproj 將類別庫加入參考至主專案內dotnet add alancoremvc/alancoremvc.csproj reference alancorelib/alancorelib.csproj 於主專案專案檔內看到類別庫已加入參考 加入完畢進行還原dotnet restore 執行測試專案dotnet test alancoremstest/alancoremstest.csproj 執行主專案cd alancoremvcdotnet run 原始碼參考https://github.com/08Alan/NetCoreAddClasslibAndTestproj","categories":[],"tags":[{"name":".NET Core","slug":"NET-Core","permalink":"https://08alan.github.io/tags/NET-Core/"}]},{"title":"Office365-OfficeDeveloperTools","slug":"Office365-OfficeDeveloperTools","date":"2017-06-03T05:10:15.000Z","updated":"2017-06-03T05:34:40.000Z","comments":true,"path":"2017/06/03/Office365-OfficeDeveloperTools/","link":"","permalink":"https://08alan.github.io/2017/06/03/Office365-OfficeDeveloperTools/","excerpt":"在Office的演進歷史中,包含本地安裝與Office 365版本, 但於Office 365內我們操作的方式與本地端的版本不大相同, Visual Studio Office Dev Tool內也依照版本的不同分為幾種專案類型, 在此篇我們先介紹OfficeTools For Visual Studio的安裝與專案.","text":"在Office的演進歷史中,包含本地安裝與Office 365版本, 但於Office 365內我們操作的方式與本地端的版本不大相同, Visual Studio Office Dev Tool內也依照版本的不同分為幾種專案類型, 在此篇我們先介紹OfficeTools For Visual Studio的安裝與專案. 在進行Web增益集的開發模式,對SharePoint內的網站進行強化, 註1:若您沒有安裝Visual Studio則可利用延伸閱讀=&gt;Napa輕量化開發工具. 註2:由於鐵人賽系列為Office 365在此不述本本地端SharePoint Server建置(建議利用延伸閱讀進行) Offiice Tools for Visual Studio安裝Office Dev Tool方式有二, 第一是從Office Developer 頁面下載進行安裝, 另一方式則是安裝Visual Studio安裝時選取. 使用Office Dev Tool 進行安裝在此筆者的開發環境使用Visual Studio 2017 Enterprise進行, 在預設的安裝內已進行Office Dev Tool 的選取, 若安裝Visual Studio時您未選取其安裝畫面如下: Visual Studio 安裝時選取因筆者的開發環境有15與17的Enterprise版本, Office Dev Tool是共用的,不需要額外安裝兩次. Visual Studio 新增專案概觀在安裝完Office Dev Tool後,在Visual Studio內專案範本可見三種專案類型, Web,VSTO,本地端SharePoint方案. VSTO專案類型與SharePoint都是針對本地端的開發模式(建議參考延伸閱讀了解差異), Office 365的版本則是透過Web增益集串接Office API 進行. 延伸閱讀Office Developer Tools 在Office 365 上設定SharePoint的開發環境 Visual Studio 2017 Download 使用 Visual Studio 建立適用於 Office 的 VSTO","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-Video","slug":"Office365-Video","date":"2017-06-02T10:11:38.000Z","updated":"2017-06-02T10:16:40.000Z","comments":true,"path":"2017/06/02/Office365-Video/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-Video/","excerpt":"Video在Office 365 擔任影音平台的角色, 在筆者目前撰稿的版本內,是無法對外分享連結的, 必須登入Office 365 才可觀看影片,若對於組織內部使用那倒無妨, 我們可以將影片分享至SharePoint內進行協作, 這也是我將其暫時列入SharePoint系列的原因, 若您擁有Yammer也能將影片嵌入碼放置社群之中. 接著我們針對Office 365 Video進行操作說明.","text":"Video在Office 365 擔任影音平台的角色, 在筆者目前撰稿的版本內,是無法對外分享連結的, 必須登入Office 365 才可觀看影片,若對於組織內部使用那倒無妨, 我們可以將影片分享至SharePoint內進行協作, 這也是我將其暫時列入SharePoint系列的原因, 若您擁有Yammer也能將影片嵌入碼放置社群之中. 接著我們針對Office 365 Video進行操作說明. 影片上傳影片上傳時需要先選取頻道, 筆者在Office 365 feedback內看到使用者回饋有大量的頻道,覺得不好選取,已Open中. 上傳影片時可對影片進行資訊填寫,或取消上傳. 上傳完成的影片,必須讓Office365處理一下,這地方要稍等一會,與Youtube有87分像. 嵌入碼 影片統計資料第一個圖表顯示 ︰ 檢視最近 14 天的每日的總的數字 每日的最近 14 天的唯一訪客總數目 每月的最後一個 36 個月檢視的總數目 每月的最後一個 36 個月，計算唯一的每日訪客的總和。 第二個圖表顯示檢視者與視訊的互動方式。 影片格式影片格式的失誤將導致上傳失敗,可以利用顯示支援的格式看看有啥不支援需要額外轉檔. 筆者於下方整理了目前支援的轉碼及副檔名. 支援的視訊轉碼器 H.264 (基準線、主要及高設定檔) MPEG-1 (包括 MPEG-PS) MPEG-2 (簡單與主要設定檔) MPEG-4 v2 (簡單視覺設定檔與進階簡單設定檔) VC-1 (簡單、主要及進階設定檔) Windows Media 視訊 (簡單、主要及進階設定檔) DV (DVC, DVHD, DVSD, DVSL) Grass Valley HQ/HQX 支援的音訊轉碼器 AC-3 (Dolby Digital 音訊) AAC (AAC-LC、HE-AAC v1 AAC-LC 核心，以及 HE-AAC v2 AAC-LC 核心) MP3 Windows Media 音訊 (Windows Media 標準音訊、Windows Media 專業音訊，以及 Windows Media 不失真音訊) 支援的視訊檔案格式1.3gp, .3g2, .3gp2,.asf,.mts, .m2ts,.avi,MOD,.ts,.vob,.xesc,.mp4,.mpeg, .mpg,.m2v 頻道Video平台主打的項目為頻道的建置, 與Youtube類似,方便使用者分類不同屬性的影片. 頻道設定一般設定一般設置內與創建頻道時大同小異, 能夠更改頻道名稱與醒目色彩,值得一提的是儲存指標較為有參考價值. 儲存指標儲存指標為網站管理員對您的頻道所進行的資源配置, 預設為1TB的網站集合上傳空間,您可以在儲存指標內查看空間是否足夠. 影片權限設置頻道的影片權限設置與Office 365 其他權限設置相同, 不得不說非常的難用,我們必須手動輸入權限關鍵字!? 才能夠選取Role,已將此問題Feedback至微軟,期望能夠獲得改善… 頻道Yammer開啟 延伸閱讀Office 365 Video 中適用的視訊格式 Office 365 影片 微軟推出Office 365 Video影片入口網站服務 O365 Video Feedback Office 365 影片中的視訊檢視統計資料","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-SharePoint應用程式","slug":"Office365-SharePoint應用程式","date":"2017-06-02T09:53:44.000Z","updated":"2017-06-02T10:08:39.000Z","comments":true,"path":"2017/06/02/Office365-SharePoint應用程式/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-SharePoint應用程式/","excerpt":"SharePoint於Office 365除了網站的建立,還能夠新增應用程式到您的網站內, 以往的版本若要新增額外功能則必須由開發人員自行導入,或者使用SharePoint資源中心進行引用, Office 365的功能讓非開發人員的群組也能夠方便簡單的利用應用程式新增達成小組網站的架設, 接下來我們新增幾個常見的應用程式透過操作說明如何新增應用程式.","text":"SharePoint於Office 365除了網站的建立,還能夠新增應用程式到您的網站內, 以往的版本若要新增額外功能則必須由開發人員自行導入,或者使用SharePoint資源中心進行引用, Office 365的功能讓非開發人員的群組也能夠方便簡單的利用應用程式新增達成小組網站的架設, 接下來我們新增幾個常見的應用程式透過操作說明如何新增應用程式. 新增應用程式-以Work為例新增應用程式的位置於設定(齒輪)內, 進入後會有SharePoint的應用程式新增建議, 這裡依照您的訂閱權限而有不同的選項. 接著我們使用Office 365 Work來進行新增, 請注意每個應用程式需要給個ID並且顯示於網站內容中. 接著點選相關的應用程式,就能夠開始使用, 完全不需要開發人員就能夠獲得任務指派的應用程式. 我們把剛剛新增的Work項目,利用網站編輯將此應用程式新增至首頁內, 方便之後不需要再點選網頁內容即可以在頁面直接操作應用程式. 新增應用程式從SharePoint市集-以GoodPoint Weather為例應用程式的新增除了由Office 365內建的功能之外, 當然少不了第三方的Connector, 在新增應用程式下方,可以利用SharePoint市集, 尋找由第三方開發者提供的內容將其加入網站內.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-SharePoint網站","slug":"Office365-SharePoint網站","date":"2017-06-02T08:58:31.000Z","updated":"2017-06-02T09:50:53.000Z","comments":true,"path":"2017/06/02/Office365-SharePoint網站/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-SharePoint網站/","excerpt":"前篇我們由訂閱方案的選擇,進入到SharePoint HomePage, 由HomePage建立了小組網站,接著我們要進行小組網站的客製化編輯, 利用頁面的新增,編輯,增加應用程式等方式讓每個網站皆有屬於自己的探討對象.","text":"前篇我們由訂閱方案的選擇,進入到SharePoint HomePage, 由HomePage建立了小組網站,接著我們要進行小組網站的客製化編輯, 利用頁面的新增,編輯,增加應用程式等方式讓每個網站皆有屬於自己的探討對象. SharePoint 網站設定進入到每個建立出來的網站我們可以看到右上角的齒輪設定, 方便對於目前頁面的動作,包含編輯本頁面,新增其他頁面, 對此網站新增應用程式,內容變更,外觀變更及進階設定,FAQ等等. 接著利用齒輪Map進行其他功能的說明. 新增與編輯頁面新增頁面預設了一個Bene為網頁Title, 新增則使用+號進行選取Benefits並且可以選擇不同的需求. 能夠新增的Benefits如以下: 我們利用實際操作,來進行較詳細的使用說明. 文字區塊 影像區塊影像的新增除了可以利用上傳Client的方式外, 也可以使用使用者近期於Office 365 使用的檔案來上傳, 或是由小組網站的OneDrive來選取. 影片區塊影片的新增我們必須利用Office 365 Video來進行, 若您需要嵌入外部影片,則必須使用嵌入碼來進行, Office 365 Video的操作方式,筆者將於後續進行. 網頁嵌入碼區塊網頁區塊新增,可以利用Html iframe 對網站的頁面區塊新增一個外部的網站連線. 醒目提醒醒目區塊能夠新增其他SharePoint網站的關注項目, 並且可以選取要關注的內容,在此展示中,我們對於OneNote進行關注. 發布網站頁面頁面新增完畢後進行發布, 我們可於SharePoint網站頁面內看到剛剛編輯的aspx檔案, 點選後可以進入頁面,獲得的連結可以加至其他頁面中方便SiteMap的實現.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-SharePoint","slug":"Office365-SharePoint","date":"2017-06-02T08:54:19.000Z","updated":"2017-06-02T08:56:09.000Z","comments":true,"path":"2017/06/02/Office365-SharePoint/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-SharePoint/","excerpt":"SharePoint翻譯成中文為分享點,也是Office 365 團隊協作的中心, 依照筆者於多個公司內部接觸過的SharePoint版本, 自架設的SharePoint Server,頂多拿來當作公司FTP使用, 擁有開發人員的組織搭配DesignTool建立基本的操作網頁等, 並無實際利用到SharePoint群組協作的優勢.","text":"SharePoint翻譯成中文為分享點,也是Office 365 團隊協作的中心, 依照筆者於多個公司內部接觸過的SharePoint版本, 自架設的SharePoint Server,頂多拿來當作公司FTP使用, 擁有開發人員的組織搭配DesignTool建立基本的操作網頁等, 並無實際利用到SharePoint群組協作的優勢. SharePoint 訂閱方案與其他訂閱相同,建議搭配Office 365, 若僅需SharePoint?的組織可單獨購買… SharePoint Home在Office 365內每個群組皆有各自的SharePoint資料, 您可以於前面的群組系列文章了解. 我們可以透過SharePointHomePage看到目前組織內部的所有活動. SharePoint IndexSharePoint內存在Index,這是組織進入SharePoint的入口, 在此篇我們先介紹一下入口網站的樣式, 接下來的文章會逐一說明於SharePoint操作及功能. 建立小組網站這部分筆者得強調一下, 我們在Outlook臨時創建的群組,並不適用於SharePoint群組網站, 它頂多能夠讓你們立即撰寫會議紀錄及檔案上傳, 若要建立群組網站,我們必須要新增一個網站並打上名稱, 當然會有獨立的文件及檔案位置,您也可以客製化編輯您網站的顯示. 延伸閱讀SharePoint:促進團隊協作 SharePoint的未來","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-群組頁面","slug":"Office365-群組頁面","date":"2017-06-02T08:43:41.000Z","updated":"2017-06-02T08:46:07.000Z","comments":true,"path":"2017/06/02/Office365-群組頁面/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-群組頁面/","excerpt":"在前幾篇的OneDrive與OneNote系列文章內, 已經是使用群組的方式進行,本篇將不介紹OneDrvive與OneNote的操作, 而是藉由群組頁面開始進入SharePoint小系列文章.","text":"在前幾篇的OneDrive與OneNote系列文章內, 已經是使用群組的方式進行,本篇將不介紹OneDrvive與OneNote的操作, 而是藉由群組頁面開始進入SharePoint小系列文章. Office 365 群組前面的文章已有在Outlook內教學下方的群組創建, 我們利用Outlook進入的群組頁面還包含著交談,與行事曆, 以及在SharePoint內的群組OneDrive與OneNote. 已現行的O365 Portal來看,也僅有Outlook可進行此功能(需另行安裝之應用外) 群組資訊接著我們點選左下角的群組並選擇其中一個進入群組資訊, 可以看見Outlook的交談,行事曆功能,以及SharePoint的OneNote與OneDrive. 群組交談群組的交談其實是使用Outlook來進行, 故若有群組內人員新增會話,則會記出信件告知群組人員, 好處是我們若只需寄信給群組協作人員,不需開啟Outlook並新增信件, 僅需要在群組交談就可以快速地與團隊成員溝通. 群組行事曆行事曆與交談相同,都是為了方便群組成員不需要額外使用Outlook再次發起會議, 試想每次開會議都要打上參與者為本小組實在是多了一道手續, 不過大多數的使用者還是習慣前者的用法. 群組檔案建立群組時會在SharePoint Online內一同創建OneDrive的位置, 除了小組內的檔案放置外,還Support了OneDrive與SharePont內相關的應用, 在此我們就不繼續介紹檔案的操作,您可以往筆者OneDrive小系列觀看使用方式. 群組筆記本筆記本與群組檔案相同,您可以在此建立行事曆內的會議紀錄, 或是在後面我們將介紹的Project , Teams 等應用程式的討論.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-OneDrive檔案及還原","slug":"Office365-OneDrive檔案及還原","date":"2017-06-02T08:35:10.000Z","updated":"2017-06-02T08:40:57.000Z","comments":true,"path":"2017/06/02/Office365-OneDrive檔案及還原/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-OneDrive檔案及還原/","excerpt":"OneDrive內包含基本的檔案上傳功能, 筆者在此篇介紹關於個人,群組檔案上傳共用等基本操作方式, 實際上使用者最常發問關於同步的處理問題,所以進行檔案同步的操作方式說明, 以及外部共用的資料夾新增,以及利用檔案歷程紀錄進行備份.","text":"OneDrive內包含基本的檔案上傳功能, 筆者在此篇介紹關於個人,群組檔案上傳共用等基本操作方式, 實際上使用者最常發問關於同步的處理問題,所以進行檔案同步的操作方式說明, 以及外部共用的資料夾新增,以及利用檔案歷程紀錄進行備份. 檔案上傳與同步OneDrive的檔案上傳方式有兩種,一為使用OneDrive Online, 二是使用OneDrive應用程式進行檔案總管的操作. OneDrive Online檔案新增網頁版本的OneDrive有個檔案新增功能, 提供檔案總管右鍵新增檔案的網頁版. 若您習慣在資料夾內進行檔案的新增後再進行編輯, 筆者認為此功能超級好用可立即創建雲端檔案,減少了檔案同步的等待. 比較一下網頁與檔案總管可新增的檔案類型可發現, 前者更有雲端的感覺,可使用連結來進行檔案的新增, 利用連結來進行外部檔案的上傳. 檔案上傳檔案上傳可選擇檔案及資料夾方式, 此方法僅於網頁版Upload,若為OneDrive應用程式僅需將檔案放置位置後等待同步即可. 利用OneDrive應用程式同步雲端位置的檔案於工作列上我們可以進行檔案同步的顯示, 同步問題,同步中,暫停同步可於此進行. 接下來我們利用應用程式新增檔案,點擊或等待自動Sync確認雲端同步成功, 正常的網路與使用上OneDrive應用程式會立即同步到雲端. 不過經常同步需要等待,故建議可以使用手動立即同步功能,確保檔案有上傳完畢. 使用檔案歷程記錄進行檔案備份及還原我們可以利用控制台內建的檔案歷程紀錄來備份檔案, 但於Win10內的快取與容量將被霸占,若開啟此功能請三思. 使用檔案歷程紀錄還原檔案 延伸閱讀OneDrive使用者入門 共用OneDrive檔案及資料夾 使用檔案歷程還原檔案或資料夾","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-商務版OneDrive同步","slug":"Office365-商務版OneDrive同步","date":"2017-06-02T08:30:14.000Z","updated":"2017-06-02T08:34:11.000Z","comments":true,"path":"2017/06/02/Office365-商務版OneDrive同步/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-商務版OneDrive同步/","excerpt":"同步商務版OneDrive#版本確認 在開啟商務用OneDrive同步檔案時,必須先進行OneDrive應用程式的版本確認, 若您的OneDrive並非最新版檔案則會跳出更新訊息, 接下來只要利用Alert內逐步操作即可同步完成.","text":"同步商務版OneDrive#版本確認 在開啟商務用OneDrive同步檔案時,必須先進行OneDrive應用程式的版本確認, 若您的OneDrive並非最新版檔案則會跳出更新訊息, 接下來只要利用Alert內逐步操作即可同步完成. 設定OneDrive取得應用程式後進行登入&gt;選取要同步的資料夾 設置完成因筆者有家用版與商務版故有兩種圖示,深藍色為商務用. 使用檔名確認版本 如果文字的結尾是 OneDrive.exe，表示有新版 OneDrive 同步處理用戶端。 如果文字的結尾是 Groove.exe，表示有舊版商務用 OneDrive 同步處理用戶端。 如果文字的結尾是 SkyDrive.exe，表示有舊版 OneDrive 個人同步處理用戶端。 同步SharePoint至電腦進入SharePoint檔案位置,選取同步處理. 將自動開啟OneDrive應用程式進行Sync, 同步完成後將顯示在檔案總管內,並依照提示字元區分. 以筆者為例(包含個人版,商務版OneDrive,SharePoint) 延伸閱讀我使用的是哪個版本的 OneDrive？ 開始使用新的 OneDrive 同步處理用戶端中 Windows","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-OneDrive使用限制","slug":"Office365-OneDrive使用限制","date":"2017-06-02T08:23:34.000Z","updated":"2017-06-02T08:28:08.000Z","comments":true,"path":"2017/06/02/Office365-OneDrive使用限制/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-OneDrive使用限制/","excerpt":"商務版本的OneDrive包含著使用條款與限制, 且因為SharePoint Online故需符合SharePoint的各種限制, 若導入時需要拋轉資料或同步等,則需要符合檔案名稱,資料夾名稱等. 本篇先了解導入前的考量,接下來再進行使用的操作.","text":"商務版本的OneDrive包含著使用條款與限制, 且因為SharePoint Online故需符合SharePoint的各種限制, 若導入時需要拋轉資料或同步等,則需要符合檔案名稱,資料夾名稱等. 本篇先了解導入前的考量,接下來再進行使用的操作. 商務用OneDrive容量商務用OneDrive基本上預設提供1T的容量, 若您的商務版本為E3版本以上則提供無限制的檔案容量. 商務用OneDrive檔案限制 無效字元(#, %, &lt;, &gt;, :, “, |, ?, *, /, ) 同步檔名限制 12345.files ~$ ._ .laccdb .tmp .tpm thumbs.db EhThumbs.db Desktop.ini .DS_Store 圖示.lock 詐騙 PRN 輔助裝置 NUL COM1 COM2 COM3 COM4 COM5 COM6 COM7 COM8 COM9LPT1 LPT2 LPT3 LPT4 LPT5 LPT6 LPT7 LPT8 LPT9 不支援的資料夾名稱(_t,_w) 媒體櫃內的檔名限制(forms) 檔名長度(256個字元) SharePoint Online使用限制 網站文件庫或清單中的清單檢視限制(最多5000個項目) 字詞數量限制(200000個字詞庫) 網站集合儲存(一個SharePoint網站集合最多25T) 網站集合數(500000) 檔案上傳限制(ClientApp最大上傳Sync 10G,網頁版本上傳則為2G) 檔案附件大小(250M) 使用者上限(若無提升則為300,最大可達500000人) 商務用OneDrive訂閱方案除了Office Business版外OneDrive也提供獨立的訂閱, 若您僅有OneDrive需求也可參考商務用OneDrive,價格較Office 365 低. 延伸閱讀商務用 OneDrive 服務說明 商務同步用戶端的限制","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-OneNote","slug":"Office365-OneNote","date":"2017-06-02T08:18:13.000Z","updated":"2017-06-02T08:27:03.000Z","comments":true,"path":"2017/06/02/Office365-OneNote/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-OneNote/","excerpt":"OneNote是微軟於Office365內新增的筆記工具, 實際使用上相較其他筆記工具有所不同, Office格式的支援,節的分類方式,Outlook的寄送,學習工具等功能, 大大改變了以往的我們對於筆記本工具的認知.","text":"OneNote是微軟於Office365內新增的筆記工具, 實際使用上相較其他筆記工具有所不同, Office格式的支援,節的分類方式,Outlook的寄送,學習工具等功能, 大大改變了以往的我們對於筆記本工具的認知. 節與頁面OneNote的筆記項目使用節-頁面-子頁面, 方便我們為了不同項目的內容創建區塊,方便日後查找, 利用章節頁面使用直覺的平日閱讀習慣來進行. 建立小節 頁籤與子頁面若要建立子頁面必須先新增頁面,新增完畢後按右鍵進行子頁面的新增, 若您有多個子頁面則一直往下新增即可. 標籤若記事本的內容較複雜,您可以使用標籤標註, 較常使用的標籤有代辦事項,與小組成員討論,提醒, 也能夠透過自訂標籤來設置. 繪圖繪圖的區塊筆者較常使用PC無觸控面板, 故很少使用此功能,但繪製流程圖時搭配文字還算順手. 若是喜歡手寫風格的使用者體驗,OneNote供畫筆與螢光筆手寫筆記. 筆跡轉換這部分是使用滑鼠進行,但判斷出來的文字不大相同, 實測於手機寫出差不多醜的字但能判斷成功. 教學與學習工具Learning Tool是專為學習而生,除了念出筆記本中文字外(Immersive Reader), 還能夠進行錄音(Dictate),使用起來有無障礙設計的理念. 將電子郵件儲存至OneNote EverNote轉換工具若您原本為大象愛用者,Microsoft提供一套匯入工具, 方便筆記本轉移,實際操作畫面 ,與軟體比較如下. 延伸閱讀Evernote 移至 OneNote OneNote 學習工具 將電子郵件儲存至 OneNote","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-會議室及設備","slug":"Office365-會議室及設備","date":"2017-06-02T07:09:51.000Z","updated":"2017-06-02T07:28:22.000Z","comments":true,"path":"2017/06/02/Office365-會議室及設備/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-會議室及設備/","excerpt":"Office 365 Outlook內包含會議室及設備的預約借用, 並利用行事曆或小幫手協助User確認會議室及設備的使用情況, 此功能在目前所有版本Exchange皆有支援,本篇文章將說明管理人員如何建立資訊, 並使用建立完成的資訊進行組織會議行事曆的邀請. 1.資源管理首頁","text":"Office 365 Outlook內包含會議室及設備的預約借用, 並利用行事曆或小幫手協助User確認會議室及設備的使用情況, 此功能在目前所有版本Exchange皆有支援,本篇文章將說明管理人員如何建立資訊, 並使用建立完成的資訊進行組織會議行事曆的邀請. 1.資源管理首頁 傳統的Exchange會議室新增必須由Infar管理人員使用Exchange管理工具進行, 而office 365的新增方法則由管理員進入Admin Center&gt;資源&gt;會議室與設備維護, 首頁可見目前存在的會議,新增會議、新增設備等. 2.新增會議室及設備點選新增進入新資源建立 選取類型 資源名稱 Mail Address 人數容量 地點位置 分機或電話號碼 3.設定完成 4.利用編輯Exchange設置維護資源 5.會議預約 6.新增人員 7.排程小幫手 8.傳送會議預約","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-Outlook群組","slug":"Office365-Outlook群組","date":"2017-06-02T04:59:51.000Z","updated":"2017-06-02T05:07:35.000Z","comments":true,"path":"2017/06/02/Office365-Outlook群組/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-Outlook群組/","excerpt":"在Office 365 Outlook信件內容除了收發信件外還包含了 檔案共用信件、群組功能、內容建立等等的通知消息, 若您無使用其他通知方法,這是Office 365上各個活動利用信件的預設通知機制, 除了收件匣外的信件及通知外,群組操作方式更加凸顯團隊協作的重要性. 群組建立及探索Office 365 Outlook納入了群組的建立,方便小組創建,以下介紹群組設置與使用.","text":"在Office 365 Outlook信件內容除了收發信件外還包含了 檔案共用信件、群組功能、內容建立等等的通知消息, 若您無使用其他通知方法,這是Office 365上各個活動利用信件的預設通知機制, 除了收件匣外的信件及通知外,群組操作方式更加凸顯團隊協作的重要性. 群組建立及探索Office 365 Outlook納入了群組的建立,方便小組創建,以下介紹群組設置與使用. 1.利用Outlook進行群組建立 2.探索小組新增完成的小組,會顯示在Outlook左下方的群組內, 您也可以透過收到的參與信件來進行小組的探索. 3.群組交談群組交談的方式,筆者認為與Slack Channel相同, 可以直接新增交談或使用主交談進行小組溝通. 使用群組交談 使用新增交談 移動端OutlookGroups App 4.群組行事曆 5.群組檔案庫創立群組時其實是Sync到Exchange並與SharePoint共用, 故於SharePoint內包含了群組的檔案分享位置. 6.群組OneNote 7.連接器群組的創立,通常是為了討論事件或專案, 因此各種第三方工具如Project管理工具,或程式碼版本控管等便不可缺少, 我們可以利用群組連接器,來達成第三方平台串接的需求. 參考連結Outlook Groups 部屬Office 365 群組 使用Office 365 群組共同作業 將應用程式連接至您的群組","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-共用及權限設置","slug":"Office365-共用及權限設置","date":"2017-06-02T04:49:25.000Z","updated":"2017-06-02T04:53:53.000Z","comments":true,"path":"2017/06/02/Office365-共用及權限設置/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-共用及權限設置/","excerpt":"以往較常見的檔案共用方法多由共用資料夾或Mail夾帶附件來進行,若多人同時進行資訊Maintain則需等待上一位編輯者操作完畢,並將自身的文件版本手動Merge內容至檔案位置達到共用目的,本篇利用前篇介紹Office 365 檔案儲存,檔案同步化,來說明共用的權限設置與操作.OneDrive &amp;&amp; SharePoint檔案共用檔案共用在SharePoint與OneDrive的方式相同,筆者在此使用OneDrive進行檔案點擊右鍵並選取共用.","text":"以往較常見的檔案共用方法多由共用資料夾或Mail夾帶附件來進行,若多人同時進行資訊Maintain則需等待上一位編輯者操作完畢,並將自身的文件版本手動Merge內容至檔案位置達到共用目的,本篇利用前篇介紹Office 365 檔案儲存,檔案同步化,來說明共用的權限設置與操作.OneDrive &amp;&amp; SharePoint檔案共用檔案共用在SharePoint與OneDrive的方式相同,筆者在此使用OneDrive進行檔案點擊右鍵並選取共用. 1.邀請人員 輸入組織內的聯絡人 權限設置(可以編輯,僅能檢視) 是否需要登入 傳送電子郵件邀請 2.取得連結使用連結分享為筆者最經常使用之功能, 若為OneDrive可設置對外連結,若有外部檢視需求,分享非常方便且快速. 若覺得網址太長,可以進行網址縮短達到美化目的. 受限制的連結(只有特定人員才能開啟此連結) 檢視連結(需要組織帳戶登入) 編輯連結(需要組織帳戶登入) 檢視連結(不須登入) 編輯連結(不須登入 3.共用對象邀請人員或取得連結的設置,會顯示在共用對象內, 方便日後清楚知道那些使用者可以對此文件進行操作, 當然也可以在此進行權限的設置. 4.進階權限設置當以上方式皆無法達到您的需求, 可以在共用對象內點擊進階進入權限控管的頁面. 進階權限的設置依照使用者新增修改刪除等劃分的更細, 您可以視需求對使用者權限進行設置. 結語Business版本內OneDrive與SharePoint其實密不可分, 仔細觀察網址會發現檔案的權限設置與位置皆處於SharePoint內, 這也代表著我們可以輕鬆於SharePoint或OneDrive上進行檔案搬移及權限調整.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-檔案儲存","slug":"Office365-檔案儲存","date":"2017-06-02T03:00:31.000Z","updated":"2017-06-02T03:16:52.000Z","comments":true,"path":"2017/06/02/Office365-檔案儲存/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-檔案儲存/","excerpt":"Office 365 當儲存檔案時,除了本機檔案方式外, 可以選擇OneDrive或SharePoint雲端儲存方式,利用雲端儲存的便利達到檔案的一致性以及檔案連結分享的功能, 本篇將介紹Word,Excel,PowerPoint,Publisher等如何使用雲端功能達成答案開啟及上傳. 檔案開啟與儲存Office的儲存與開啟可以選擇組織內部的OneDrive或SharePoint且有檢視以上權限的文件. 若您的雲端為外部 也可以使用新增位置來進行不同網域的檔案存取.","text":"Office 365 當儲存檔案時,除了本機檔案方式外, 可以選擇OneDrive或SharePoint雲端儲存方式,利用雲端儲存的便利達到檔案的一致性以及檔案連結分享的功能, 本篇將介紹Word,Excel,PowerPoint,Publisher等如何使用雲端功能達成答案開啟及上傳. 檔案開啟與儲存Office的儲存與開啟可以選擇組織內部的OneDrive或SharePoint且有檢視以上權限的文件. 若您的雲端為外部 也可以使用新增位置來進行不同網域的檔案存取. 使用SharePoint方式開啟或儲存檔案 當使用網站開啟或儲存時會將SharePoint底下的目錄顯示,方便確認路徑. 儲存後進入SharePoint後可觀看到檔案內容(如下圖所示). 使用OneDrive儲存檔案 OneDrive會顯示出個人的雲端硬碟目錄, 儲存及顯示路徑時效能也較SharePoint好, 儲存後進入OneDrive後可觀看到檔案內容(如圖) 結語開啟舊檔您可利用上述的另存新檔功能比照, 在此篇列出Office 365雲端儲存與傳統儲存方式之不同, 其主要目的為後續文章將介紹檔案權限設置,利用設置權限達到協作與共用的目的. 而Office 365 利用雲端位置的開啟,想當然較檔案總管(Client端的模式)速度上有差異,使用上的需要多點耐心.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-商務版","slug":"Office365-Business","date":"2017-06-01T02:42:54.000Z","updated":"2017-06-01T03:02:13.000Z","comments":true,"path":"2017/06/01/Office365-Business/","link":"","permalink":"https://08alan.github.io/2017/06/01/Office365-Business/","excerpt":"商務版Office 365 App服務較家用版豐富.除了針對IT管理人員方便設定組織化、聯絡人資訊、Exchange、Active Directory維運等,更存在大量的協作,建置工具令組織成員溝通及會議進行更為順暢.筆者在此篇淺談O365 Business APP服務,並於接下來的文章將逐一進行說明與介紹. 淺談Office 365 Business服務","text":"商務版Office 365 App服務較家用版豐富.除了針對IT管理人員方便設定組織化、聯絡人資訊、Exchange、Active Directory維運等,更存在大量的協作,建置工具令組織成員溝通及會議進行更為順暢.筆者在此篇淺談O365 Business APP服務,並於接下來的文章將逐一進行說明與介紹. 淺談Office 365 Business服務 文書處理: 傳統的Office服務,儲存檔案時可選擇OneDrive雲端硬碟分享,更可使用協作功能授權進行多人同時編輯協作,提供Online功能,使用未下載安裝的裝置也能利用網頁隨時編輯檔案,令人驚呼連連的雲端協作,網路正常情況下感覺不出Sync延遲. 郵件: 包含相關Exchange功能,郵件收發,行事曆,會議開立,工作流程等.提供Online不需額外架設網頁版本Outlook即可線上使用.相關的服務連接埠號與傳統Exchange稍有不同(POP:995,IMAP:993,SMTP:587) SharePoint: 微軟提供組織內部入口網站包含團隊協作溝通、文件庫、檔案管理等功能O365版本提供行動存取,促進團隊合作效率,以往SharePoint需要建置SharePoint Server,O365版本則改為雲端模式並將檔案儲存於OneDrive,安全性則符合企業級安全規範. OneDrive: Microsoft平台服務雲端硬碟,Business用戶每人1TB的使用資源,Office365共用及協作服務Storage,儲存檔案、個人設定檔、甚至開發專案目錄皆存放於此. OneNote: 基於OneDrive的筆記本文件,可選擇於SharePoint或OneDrive建立,雲端化的文件協作,可邀請成員共用編輯,並提供Mobile隨處存取,特殊的功能如錄製音訊,錄製影像,插入Excel,檔案附件建立等等,於團隊會議或群組討論時紀錄筆記非常方便. Publisher 雖然介面與OfficeGroup類似,但功能與使用上較為不同,主要為公司發布邀請函(EDM)或美化信件(HTML)之軟體,節省了公司需要設計人員自行撰寫HTML或製作PDF的工時. Planner 專案管理工具類似Trello,Agile board視覺化顯示各種任務指派,優勢為整合了Office365各種服務(Excel、Word、Outlook、OneDrive、OneNote等)加強團隊協作的任務指派,在企業內部的Office協作上能更有效提供效率,而非傳統的專案管理工具使用文件附加與wiki等方式操作. PowerBI: 商務分析協作工具,能夠產出儀表板、視覺化分析圖表、商業分析報表,資料獲取方面分為內容套件庫(組織發行工具,線上服務),匯入或連接(Office或檔案等匯入,Azure Database連接等)透過內建的操作及範例程式能夠串接並產生報表. Sway: 對於類似PowerPoint之簡報系列軟體,優點為極類似現代化故事述說模式.需要插入的素材(影片,照片等)使用連結取出直接採用至簡報內不需額外下載,比起PPT筆者認為更類似線上編輯工具所產生的網頁,製作完成後可使用Share功能產生網頁連結立即分享,十分方便. Create Apps: 在此將三個服務功能同時列舉原因為Flow與Dynamics皆為PowerApps所衍伸出來的功能PowerApps供設置企業內部App且不大需要撰寫程式便能做出應用程式但API的串接,相關操作的連接變更等等若非開發人員學習曲線較高.Flow可設置各事件的流程處理,Dynamics365則為APPs平台,將創建完成之PowerApps顯示於此,供人員快速取用. Teams: 目前在Office365 Online看不到這個App,若需開啟此服務,須進入Office365 Admin Center開啟,安裝方式與Office365目前暫時分家(https://teams.microsoft.com/),主要的功能與Slack等團隊協作溝通相同,與Office365組織整合的非常密切.透過組織內的聯絡人進行小組溝通平台創建,排程會議,相關的檔案Sync至Office365內,並且可建立OnNote立即記錄筆記. 結語:Office365存在著非常多的功能,目前許多項目皆為Preview版本,且發展速度非常快,各種不同的應用推出,Office365真的不僅僅是Office而已, 參考資料: Learn Office 365 for business explore-office-delve SharePoint 2016 Sway.com OneDriveDevCenter OneNoteDevCenter Microsoft Teams Downloads","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-家用版","slug":"Office365-家用版","date":"2017-06-01T02:04:42.000Z","updated":"2017-06-01T02:19:04.000Z","comments":true,"path":"2017/06/01/Office365-家用版/","link":"","permalink":"https://08alan.github.io/2017/06/01/Office365-家用版/","excerpt":"Office 365 分為家庭\\個人版,實際上能使用的功能範圍不大相同,因同時使用商務版與家庭版,登入介面時常混淆.故分為了兩篇文章來介紹兩種版本不同的使用方式. 家庭版O365 Apps:Outlook 僅App 不含Exchange功能但依舊能夠使用聯絡人與行事曆OneDrive 包含每一位使用者1TB空間Word、Excel 雲端硬碟協作Sway互動式簡報","text":"Office 365 分為家庭\\個人版,實際上能使用的功能範圍不大相同,因同時使用商務版與家庭版,登入介面時常混淆.故分為了兩篇文章來介紹兩種版本不同的使用方式. 家庭版O365 Apps:Outlook 僅App 不含Exchange功能但依舊能夠使用聯絡人與行事曆OneDrive 包含每一位使用者1TB空間Word、Excel 雲端硬碟協作Sway互動式簡報 帳戶管理:1.費用提醒若您為每月訂閱者,Office 365 會建議切換為每年付款,但節省的金額貌似算錯了正確的金額為一年3190,每月訂閱為320,實際上一年節省650元 2.安裝資訊PC、MAC、Windows安裝包含電腦名稱、安裝日期、使用者資訊,且供管理人員隨時停用 3.其他裝置 4.共用Office 365家用版的O365可供5位使用者使用,且擁有PC上安裝Office應用程式,Mobile安裝,OneDrive1TB的權限. 您可以使用Emil邀請,設置Microsoft家庭成員,Facebook,Link傳送以上方式皆可新增人員訂閱權益,管理人員設定完畢後,User端會接收到一串Officel 365 之邀請連結提供下載與使用確認. 5.服務及訂閱訂閱頁面包含O365安裝及設定、帳單紀錄、訂閱取消、方案更換、付款方式更換等功能. 提醒：若您使用的Office365包含商務版及家用版這將導致登入較難分辨入口的正確(LoginPortal為不同的入口 但依照UI較難分辨差異).建議家用版的使用者可以登入Microsoft後尋找訂閱資訊進入登入.或者登入服務後再選取帳戶轉至帳戶入口除雲端管理檔案功能外,家用版使用上較與傳統使用方式相似,價位也相對便宜年訂閱3190供五位使用者使用若僅需較簡易的Office功能可以參考家用版Office.以下為正確登入時的畫面: 若進入到Office 365 Business登入畫面輸入家用版時將顯示錯誤訊息","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-版本選擇","slug":"Office365-版本選擇","date":"2017-05-30T08:25:45.000Z","updated":"2017-05-30T12:29:59.000Z","comments":true,"path":"2017/05/30/Office365-版本選擇/","link":"","permalink":"https://08alan.github.io/2017/05/30/Office365-版本選擇/","excerpt":"Office365是微軟針對個人、家庭、企業內部組織等不同需求之協作與生產工具, 包含檔案收納,報表編寫,郵件收發,團隊協作等等的功能(近期更推出了Teams團隊協作) 除了家庭與個人版本外,Business依照不同的組織模式更提供不同的解決方案. 版本選擇:不同的使用習慣可以視您的需求選取家用或Business版本 兩版本最大的不同為Business提供的商務功能(Active Directory,Exchange Online,商務用Skype,商務用OneDrive…)","text":"Office365是微軟針對個人、家庭、企業內部組織等不同需求之協作與生產工具, 包含檔案收納,報表編寫,郵件收發,團隊協作等等的功能(近期更推出了Teams團隊協作) 除了家庭與個人版本外,Business依照不同的組織模式更提供不同的解決方案. 版本選擇:不同的使用習慣可以視您的需求選取家用或Business版本 兩版本最大的不同為Business提供的商務功能(Active Directory,Exchange Online,商務用Skype,商務用OneDrive…) 家用/個人版: 企業及商務版: Office 365雲端優勢: 隨處存取 - 跨平台支援,實現移動辦公 線上更新 - 版本持續升級,與買斷&amp;舊版本不同,(EX:不需再額外Office 2018..20..) 方便管理 - Web UI 管理平台,讓IT管理員視覺化管理,節省機器與人力成本 團隊協作 - 文件儲存Onedrive,協作平台Teams 官方支援 - 微軟全年無休Support 資料安全 - 數據預防遺失 Office 365試用:家用版Office 365提供30天的免費試用 官網上小小提醒如下 購買時必須使用信用卡。您可以免費試用 1 個月，之後每月只需支付 NT$320.00，就能使用Office 365 家用版，而且可以隨時取消。 內含Excel,Word,Outlook…等 且與正式版相同可安裝最多五台PC,Tab,Mobile Office 365 Try Office 365 Dev Center 試用 Business 訂閱:若為開發人員 可使用Dev Center 內含1年的免費訂閱 並獲得專業加強版的Office 365產品訂閱 申請成為測試人員:填寫Office 365 Developer Program (圖2) 可協助測試最新Preview版軟體 依照Office回報機制或至GitHub進行反饋 協助軟體發展 Office Dev Center 參考資料:Office365Taiwan Microsoft licensing Office365 VS Office 2016 Office Dev Center","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"SQLDataSource於後端取得Parameters Value","slug":"WebForm-SQLDataSource於後端取得ParametersValue","date":"2017-05-29T11:11:57.000Z","updated":"2017-06-20T08:11:57.000Z","comments":true,"path":"2017/05/29/WebForm-SQLDataSource於後端取得ParametersValue/","link":"","permalink":"https://08alan.github.io/2017/05/29/WebForm-SQLDataSource於後端取得ParametersValue/","excerpt":"今日於論壇上看到了一位開發人員提出的問題 [C#] 請問如何看到 SqlDataSource 的 SelectCommand 代換參數值後的結果？ 因平常WebForm專案的維護皆使用ADO.NET進行,故直接聯想到SelectParameters的方式, 沒想到這樣的調用方式竟然個誤人子弟的回覆,趕緊進行觀念排除… 是說 太久沒用的技術還是回顧一下再回覆會比較好 SqlDataSource設置 於前端頁面aspx建立一個DropDownList 並串接SqlDataSource並設定SelectCommand (您可以點選設定資料來源來進行↓)","text":"今日於論壇上看到了一位開發人員提出的問題 [C#] 請問如何看到 SqlDataSource 的 SelectCommand 代換參數值後的結果？ 因平常WebForm專案的維護皆使用ADO.NET進行,故直接聯想到SelectParameters的方式, 沒想到這樣的調用方式竟然個誤人子弟的回覆,趕緊進行觀念排除… 是說 太久沒用的技術還是回顧一下再回覆會比較好 SqlDataSource設置 於前端頁面aspx建立一個DropDownList 並串接SqlDataSource並設定SelectCommand (您可以點選設定資料來源來進行↓) 設定完成後aspx code inline 如下所示: 12345678&lt;asp:DropDownList ID=\"DropDownList1\" CssClass=\"form-control\" runat=\"server\" DataSourceID=\"SqlDataSource1\" DataTextField=\"UserName\" DataValueField=\"AccountID\"&gt;&lt;/asp:DropDownList&gt;&lt;asp:SqlDataSource ID=\"SqlDataSource1\" runat=\"server\" ConnectionString=\"&lt;%$ ConnectionStrings:WelfareConnectionString %&gt;\" SelectCommand=\"Select * From Members WHERE UserName = @Name\" OnSelected=\"SqlDataSource1_Selected\" OnSelecting=\"SqlDataSource1_Selecting\"&gt; &lt;SelectParameters&gt; &lt;asp:Parameter Type=\"String\" Name=\"Name\" DefaultValue=\"alan.liu\" /&gt; &lt;/SelectParameters&gt;&lt;/asp:SqlDataSource&gt; 並在SqlDataSource Selecting事件內加入DefaultValue(您也可以直接寫在前端SqlDataSource的Attribute DefaultValue內) 1234protected void SqlDataSource1_Selecting(object sender, SqlDataSourceSelectingEventArgs e)&#123; SqlDataSource1.SelectParameters[\"Name\"].DefaultValue = \"Alan.Liu\";&#125; 接下來抓取送入資料連線的參數值(這邊就不新增值 僅抓取送入sql的DefaultValue即可) 經由eventArgs Command獲取(MSDN參考) 1234567protected void SqlDataSource1_Selected(object sender, SqlDataSourceStatusEventArgs e)&#123; foreach (DbParameter param in e.Command.Parameters) &#123; Debug.Write(param.Value); &#125;&#125; 結論 若新專案非得使用WebForm開發 個人還是提倡多層架構 DAO to Service DAO部分 可以使用ADO.NET 或 EF進行會比較活 而這些老舊的控制項 就隨他去吧…","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Datatable Insert To SQL Server","slug":"WebForm-DatatableInsertToSQLServer","date":"2017-05-29T10:46:43.000Z","updated":"2017-06-20T08:13:46.000Z","comments":true,"path":"2017/05/29/WebForm-DatatableInsertToSQLServer/","link":"","permalink":"https://08alan.github.io/2017/05/29/WebForm-DatatableInsertToSQLServer/","excerpt":"ADO.NET大量資料新增至SQL Server ,除了迴圈處理外 還可使用Datatable 當成parameter T-SQL定義資料類型:1234CREATE TYPE [dbo].[TrackingNumberType] AS TABLE( [ZRMANO][nvarchar](50) not null ,[POSNR][nvarchar](10) null)","text":"ADO.NET大量資料新增至SQL Server ,除了迴圈處理外 還可使用Datatable 當成parameter T-SQL定義資料類型:1234CREATE TYPE [dbo].[TrackingNumberType] AS TABLE( [ZRMANO][nvarchar](50) not null ,[POSNR][nvarchar](10) null) Stored Procedure:12345678910CREATE PROCEDURE [dbo].[InsertTrackingNumberTable] @TrackingNumberType TrackingNumberType readonlyASBEGININSERT INTO [dbo].ttTrackingNumber SELECT [ZRMANO] ,[POSNR] FROM @TrackingNumberTypeEND C# Behide Code:12345678910111213141516171819DBInit();StringBuilder sql = new StringBuilder();sql.AppendLine(\"EXEC InsertTrackingNumberTable @TrackingNumberTypeParam\");dt.TableName = \"TrackingNumberType\";SqlParameter parameter = new SqlParameter();parameter.ParameterName = \"@TrackingNumberTypeParam\";parameter.TypeName = \"dbo.TrackingNumberType\";//parameter.SqlDbType = System.Data.SqlDbType.Structured;parameter.Value = dt;cm.Parameters.Add(parameter);try&#123; cm.CommandText = sql.ToString(); count = cm.ExecuteNonQuery();&#125;catch (Exception ex)&#123; throw ex;&#125; 執行效能: 1000筆測試 約10-40毫秒","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Hi!TypeScript","slug":"Typescript-hitypescript","date":"2017-05-09T02:34:48.000Z","updated":"2017-06-20T08:12:18.000Z","comments":true,"path":"2017/05/09/Typescript-hitypescript/","link":"","permalink":"https://08alan.github.io/2017/05/09/Typescript-hitypescript/","excerpt":"前言 目前工作上較偏向後端工程,內容多為DBA或WebAPI產出 前端熱血小宇宙不停呼喚著(別想用Javascript + Jquery總是敷衍我們!!!) 這一兩年前端的發展迅速 Knockout、Angular、TypeScript、React…等 對於C#較有概念 強型別的方式可能會比較容易上手 開始學習 TypeScript 吧!","text":"前言 目前工作上較偏向後端工程,內容多為DBA或WebAPI產出 前端熱血小宇宙不停呼喚著(別想用Javascript + Jquery總是敷衍我們!!!) 這一兩年前端的發展迅速 Knockout、Angular、TypeScript、React…等 對於C#較有概念 強型別的方式可能會比較容易上手 開始學習 TypeScript 吧! 工具 Visual Studio Enterprise 2015 Visual Studio Code 1.0.0 .NET Framework 4.6.1 內文 利用Visual Studio新增TypeScript專案 當然您也可以使用npm cli 或 web pack進行 範本建立後可見CSS,TS,Index ts Template內容為日期時間顯示 接著進行Start()內setInterval Function撰寫方式修改 123456start() &#123; this.timerToken = setInterval(function () &#123; this.span.innerHTML = new Date().toUTCString() &#125;, 500); &#125; 再度執行網頁後發現時間並無更新 開啟開發者工具查看 接著查看App.js (js為ts編譯出來的執行檔 可由map內查看map config) 原先的Function撰寫方式 經過編譯後與修改過後的無不同 1234Greeter.prototype.start = function () &#123; var _this = this; this.timerToken = setInterval(function () &#123; return _this.span.innerHTML = new Date().toUTCString(); &#125;, 500); &#125;; 最後將Class套用至Div內 ts: 12345window.onload = () =&gt; &#123; var el = document.getElementById('content'); var greeter = new Greeter(el); greeter.start();&#125;; js(差異僅有上述說明之function編譯後的撰寫方式): 12345window.onload = function () &#123; var el = document.getElementById('content'); var greeter = new Greeter(el); greeter.start();&#125;; 心得 TypeScript Call Class 並設立物件架構,實在是與C# 或 Java非常的類似, 若本身有JS語法+多層架構概念 應該會較好上手","categories":[],"tags":[{"name":"Typescript","slug":"Typescript","permalink":"https://08alan.github.io/tags/Typescript/"}]},{"title":"PowerMode","slug":"VisualStudio-PowerMode","date":"2017-05-08T09:02:37.000Z","updated":"2017-06-20T08:14:13.000Z","comments":true,"path":"2017/05/08/VisualStudio-PowerMode/","link":"","permalink":"https://08alan.github.io/2017/05/08/VisualStudio-PowerMode/","excerpt":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214","text":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214選項內的參數設定如下: Parameters: Alpha Decrement AmountAlpha 增減Explosion Particle - get color from environment取得環境色彩Explosion particle color爆炸顆粒色彩Explosion Particle Randomized Color隨機產生顏色Frame Delay延遲值Gravity重力值Max Particle Count最大粒子數量Max Side Velocity最大側面速率Max Upwards Velocity最大向上速率Particles Enable顆粒啟用Screen Shake螢幕震動Start AlphaAlpha值 結論 因為Visual Studio設定為深色背景, 更改爆炸顏色卻無法更新(Bug), 不過官方Git 已註記 期待更新中 使用圖片如下：","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"VisualStudio-PerfTips消失事件簿","slug":"VisualStudio-PerfTips消失事件簿","date":"2017-05-06T08:53:02.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/05/06/VisualStudio-PerfTips消失事件簿/","link":"","permalink":"https://08alan.github.io/2017/05/06/VisualStudio-PerfTips消失事件簿/","excerpt":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了","text":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了 本文 近期總是發生監看式異常的情形, 造成開發上面偌大的困擾, 於是修改了偵錯的相關設定 但PerfTips與診斷工具卻離我而去了 如圖: 雖然說專案排程進行不導致延後 不過安裝VS2015卻有新功能無法使用實在讓人心裡產生不快 終於下定決心Reset一次 想說要修不如就大修一次(修復與更新) 但此行為僅是為了更新而進行修復 必非要解決Option的個人化設定檔功能 若要還原Default可參考KingKong Bruce記事的文章 ※不過這邊要對於devenv.exe /resetuserdata小小抱怨一下 雖然我使用了重製但還是執行到一半然後跳出系統錯誤的訊息… 使用匯入匯出的重製方式也達到相同的重製效果: 結論 詳細的監看式異常使用代碼關鍵字還是無法得知, 僅能看到微軟的結論為:若發生此問題請回報於我們 不過需要的工具能回來就好 PerfTips與診斷工具通通回來了(大師兄~~~ 後記 以往於2015前的版本 為了測試系統執行耗費時間 則是必須另外撰寫Stopwatch事件 有了PerfTips後就不會有多餘的程式碼了. 123456Stopwatch sw = new Stopwatch();sw.Reset();sw.Start();//threadssw.Stop();sw.ElapsedMilliseconds;","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"SQL Server Login DefaultDatabase","slug":"SQLServer-LoginDefaultDatabase","date":"2017-05-06T08:33:48.000Z","updated":"2017-06-20T08:11:37.000Z","comments":true,"path":"2017/05/06/SQLServer-LoginDefaultDatabase/","link":"","permalink":"https://08alan.github.io/2017/05/06/SQLServer-LoginDefaultDatabase/","excerpt":"這次遇到的問題是SQL Server登入發生異常…","text":"這次遇到的問題是SQL Server登入發生異常… 工具：SQLServerExpress2014 + SSMS2014Express 問題發生原因為資料庫遭協作人員卸載造成 但使用sa卻無法登入此DataBase??? 經查後發現測試機內DefaultDB被修改為指定資料庫 根據MSDN說明 系統預設應為Master,如下圖↓ 調整的方式有二 一、使用連接到伺服器並調整為Master 二、執行內建SP設定 EXEC sp_defaultdb &#39;sa&#39;, &#39;Master&#39;; 對於修改預設值這種事情 小弟還是會確認後並告知合作夥伴再進行設置 非必要性還是能不改就不改 以免造成不必要的工時耗費…","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"WebForm-CodeBehide動態產生動態產生htmltable","slug":"WebForm-CodeBehide動態產生動態產生htmltable","date":"2017-04-25T09:10:02.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","excerpt":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷","text":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷譬如有四個人 Alan 丁小哲 陳小白 賴奕仁 以上四位的7點-12點狀態為何 13-16點狀態為何的顯示 這次使用較原始的方式&gt;&gt;&gt;畫出Html Table來進行 對小弟來說 正在趕的case較無法做技術研究 只能以最直觀且好技轉的方式來執行 但效能明顯差了許多 程式部份： 依照取得的資料來進行繪製table 首先先將主要的人員列出來 並由對人員進行applydt的狀態查詢 依照每小時每10分鐘畫出一個TD並且於該時間內進行狀態查詢 若有資料則判斷資料是否於時間內，並且顯示狀態 若不符合 則顯示其他狀態 最後將繪製好的表格字串 傳入table做屬性新增 讓我們來看看狀態取得的Method 裡面也是table的繪製字串 並且使用case進行狀態顏色的判別 執行成果： 時\\區間 狀態顯示(10分鐘為一格)","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-NPOI","slug":"WebForm-NPOI","date":"2017-04-25T09:02:11.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-NPOI/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-NPOI/","excerpt":"POI For .NET","text":"POI For .NET 函式庫： NPOI.DLL：NPOI 核心函式庫。 NPOI.DDF.DLL：NPOI 繪圖區讀寫函式庫。 NPOI.HPSF.DLL：NPOI 文件摘要資訊讀寫函式庫。 NPOI.HSSF.DLL：NPOI Excel BIFF 檔案讀寫函式庫。 NPOI.Util.DLL：NPOI 工具函式庫。 NPOI.POIFS.DLL：NPOI OLE 格式存取函式庫。 ICSharpCode.SharpZipLib.DLL：檔案壓縮函式庫。 報表匯出Method 表頭Utility 方法為傳入一個DataTable,表頭陣列,報表名稱 執行結果：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-Session","slug":"WebForm-Session","date":"2017-04-25T08:54:21.000Z","updated":"2017-05-12T07:27:15.000Z","comments":true,"path":"2017/04/25/WebForm-Session/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-Session/","excerpt":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔","text":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔就跟我們去吃飯 結完帳會得到發票與號碼牌 店家在依據號碼牌與發票上的點餐 來送餐 但在猶豫不決的點餐狀況下 跟老闆是沒有關係的 最後再送出菜單給老闆做確認 點越多店家當然越忙 這邊的店家就與Server相同 將帳號密碼的部份 傳入Dao Hash 若查詢的Dao為True則進行Session的設置 當然您可以搭配identity去獲得驗證的資料 Session的設置：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-ServiceTiers","slug":"WebForm-ServiceTiers","date":"2017-04-25T08:42:58.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-ServiceTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-ServiceTiers/","excerpt":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為","text":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為 程式的上方建立了Entity及一個Service 並且使用了查詢IronMan資料的DataTable 最後進行發信及流程完畢提醒 範例Service call DAO DAO資料串接部分就不多說了 建議參考前述的文章","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-EntityTiers","slug":"WebForm-EntityTiers","date":"2017-04-25T06:05:17.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-EntityTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-EntityTiers/","excerpt":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態","text":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態 使用時 呼叫後對其設置一個值(!注意Public的值是可以被覆蓋的) 若是於set完畢後又重新定義 則會取到最後set的值 傳進Dao進行查詢 主要目的：ADO資料查詢方式採用抽出 達到不同分層的維護性提升","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-MultiTiers","slug":"WebForm-MultiTiers","date":"2017-04-25T03:35:36.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-MultiTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-MultiTiers/","excerpt":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。","text":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。比對一下，此次開發的專案 想當然是一種Tiers的表示方式 以下展示資料基底的部分，也就是Dao Dao被稱為數據訪問對象 在這次的專案內提供了DB資料的查詢及異動 內容Region分成了QueryGet,Insert,Update,Delete 如上圖所示 這是一個簡單的查詢 包含了一個條件 並於結束後回傳一個DataTable Dao所需要的值由Entity.cs提供 為了預防資料隱碼(SQL injection)使用參數入值 最後在return 給Service層做資料使用。 此層的目的主要在於資料的讀取及判斷 並將類似的查詢使用條件作為區分 故Dao為基底提供不同頁面Service做程式面的判斷及使用。","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Javascript開始與結束日期-不足補0","slug":"Javascript-開始與結束日期-不足補0","date":"2017-04-25T02:59:22.000Z","updated":"2017-06-20T08:12:08.000Z","comments":true,"path":"2017/04/25/Javascript-開始與結束日期-不足補0/","link":"","permalink":"https://08alan.github.io/2017/04/25/Javascript-開始與結束日期-不足補0/","excerpt":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8","text":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8 而要比較的日期內容為 立即下比較的結果 當然是失算拉!!! 12345678910//日期比較function checkDateEarlier(strStart, strEnd) &#123; var d1 = Date.parse(strStart); var d2 = Date.parse(strEnd); if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; else &#123;return true;&#125;&#125; 同上一篇的內容將日期改為數字比大小201488000000當然比201408080000來的大 但這兩個日期在人類的眼中是同一日阿!! google了一下 發現許多前輩 皆寫了method來解決此問題 通常是在Date()後方 新增一個format的方法 但 考量到code複雜 與 花費時間 只好套用其中一個較簡便的方法↓ 12345var Today = new Date();var yyyy = Today .getFullYear().toString();var mm = (Today.getMonth()+1).toString();var dd = Today.getDate().toString();var thisDate = yyyy+\"-\"+(mm[1] ? mm : \"0\"+mm[0])+\"-\"+(dd[1] ? dd : \"0\" +dd[0]) ; 經過測試後…發現較低階的瀏覽器支援js並沒有陣列式的轉換(但較高階的都可以處理完成) 造成了mm[0] 與 dd[0] 為underfined 反正目的是不足要補0 使用大絕招 if判斷補0 12345678910var today = new Date();var tdm = today.getMonth() + 1;if (tdm.toString().length == 1) &#123; tdm = \"0\" + tdm;&#125;var tdd = today.getDate()if (tdd.toString().length == 1) &#123; tdd = \"0\" + tdd;&#125;td = today.getFullYear() + '/' + tdm + '/' + tdd; 讓我們來看看輸出結果 最後拿去比較後的判斷了日期完成!!!","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"Javascript開始與結束日期比較","slug":"Javascript-開始與結束日期比較","date":"2017-04-24T09:38:34.000Z","updated":"2017-06-20T08:14:22.000Z","comments":true,"path":"2017/04/24/Javascript-開始與結束日期比較/","link":"","permalink":"https://08alan.github.io/2017/04/24/Javascript-開始與結束日期比較/","excerpt":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來","text":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來用int的方式進行大小比較 畢竟前面一定是20XX(至少在我昇天之前QQ) 我們就從2千零一十四萬開始比大小吧!! 12345678910111213141516171819function checkDateEarlier(strStart, strEnd) &#123; var arr1 = strStart.split(\"/\"); var arr2 = strEnd.split(\"/\"); var date1 = new Date(arr1[0], parseInt(arr1[1].replace(/^0/, \"\"), 10) - 1, arr1[2]); var date2 = new Date(arr2[0], parseInt(arr2[1].replace(/^0/, \"\"), 10) - 1, arr2[2]); if (arr1[1].length == 1) arr1[1] = \"0\" + arr1[1]; if (arr1[2].length == 1) arr1[2] = \"0\" + arr1[2]; if (arr2[1].length == 1) arr2[1] = \"0\" + arr2[1]; if (arr2[2].length == 1) arr2[2] = \"0\" + arr2[2]; var d1 = arr1[0] + arr1[1] + arr1[2]; var d2 = arr2[0] + arr2[1] + arr2[2]; if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; 比較日期欄位是否小於今日 12345td = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();if (!checkDateEarlier(td, starttime.value)) &#123; alert(WarningStr); return false;&#125; 開始與結束日期做比較 1234if (!checkDateEarlier(timestart.value, timeend.value)) &#123; alert(WarningStr+\"(日期錯誤)\"); return false;&#125; 若是年份相同 比較小時 1234if (parseInt(starth) &gt; parseInt(endh)) &#123; alert(WarningStr+\"(小時錯誤)\"); return false; &#125; 若是小時相同比較分鐘 12345if (starth = endh) &#123; if (startm &gt;= endm) &#123; alert(WarningStr+ \"(分鐘錯誤)\"); return false; &#125;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"連接InfomixDB","slug":"ASP.NET-連接InfomixDB","date":"2017-04-24T06:48:02.000Z","updated":"2017-06-20T08:13:18.000Z","comments":true,"path":"2017/04/24/ASP.NET-連接InfomixDB/","link":"","permalink":"https://08alan.github.io/2017/04/24/ASP.NET-連接InfomixDB/","excerpt":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接","text":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接安裝完成後 將 IBM.Data.Informix.dll 加入專案參考 連接工具使用SSMS試看看(果然不行) 這邊採用的是RazorSQL 基礎語法與SQL Server相似,進階需求除外 連接字串則需要稍作修改 1234567using IBM.Data.Informix; string conn= &quot;Host=&quot; + HOST + &quot;; &quot; + &quot;Service=&quot; + SERVICENUM + &quot;; &quot; + &quot;Server=&quot; + SERVER + &quot;; &quot; + &quot;Database=&quot; + DATABASE + &quot;; &quot; + &quot;User Id=&quot; + USER + &quot;; &quot; + &quot;Password=&quot; + PASSWORD + &quot;; &quot;; 如果您使用的是sqldatasource 記得設定資料來源管理員(ODBC) 以上應該就能連結資料庫囉","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"SQL Server - Convert日期函數","slug":"SQLServer-Convert日期函數","date":"2017-04-24T05:21:00.000Z","updated":"2017-06-20T08:11:32.000Z","comments":true,"path":"2017/04/24/SQLServer-Convert日期函數/","link":"","permalink":"https://08alan.github.io/2017/04/24/SQLServer-Convert日期函數/","excerpt":"代碼與格式時常忘記隨手紀錄常用的日期函數","text":"代碼與格式時常忘記隨手紀錄常用的日期函數1234567891011121314151617181920212223242526272829303132333435363738394041Select CONVERT(varchar(100), GETDATE(), 0): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 1): 05/16/06 Select CONVERT(varchar(100), GETDATE(), 2): 06.05.16 Select CONVERT(varchar(100), GETDATE(), 3): 16/05/06 Select CONVERT(varchar(100), GETDATE(), 4): 16.05.06 Select CONVERT(varchar(100), GETDATE(), 5): 16-05-06 Select CONVERT(varchar(100), GETDATE(), 6): 16 05 06 Select CONVERT(varchar(100), GETDATE(), 7): 05 16, 06 Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 Select CONVERT(varchar(100), GETDATE(), 9): 05 16 2006 10:57:46:827AM Select CONVERT(varchar(100), GETDATE(), 10): 05-16-06 Select CONVERT(varchar(100), GETDATE(), 11): 06/05/16 Select CONVERT(varchar(100), GETDATE(), 12): 060516 Select CONVERT(varchar(100), GETDATE(), 13): 16 05 2006 10:57:46:937 Select CONVERT(varchar(100), GETDATE(), 14): 10:57:46:967 Select CONVERT(varchar(100), GETDATE(), 20): 2006-05-16 10:57:47 Select CONVERT(varchar(100), GETDATE(), 21): 2006-05-16 10:57:47.157 Select CONVERT(varchar(100), GETDATE(), 22): 05/16/06 10:57:47 AM Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16 Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 Select CONVERT(varchar(100), GETDATE(), 25): 2006-05-16 10:57:47.250 Select CONVERT(varchar(100), GETDATE(), 100): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 101): 05/16/2006 Select CONVERT(varchar(100), GETDATE(), 102): 2006.05.16 Select CONVERT(varchar(100), GETDATE(), 103): 16/05/2006 Select CONVERT(varchar(100), GETDATE(), 104): 16.05.2006 Select CONVERT(varchar(100), GETDATE(), 105): 16-05-2006 Select CONVERT(varchar(100), GETDATE(), 106): 16 05 2006 Select CONVERT(varchar(100), GETDATE(), 107): 05 16, 2006 Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 Select CONVERT(varchar(100), GETDATE(), 109): 05 16 2006 10:57:49:437AM Select CONVERT(varchar(100), GETDATE(), 110): 05-16-2006 Select CONVERT(varchar(100), GETDATE(), 111): 2006/05/16 Select CONVERT(varchar(100), GETDATE(), 112): 20060516 Select CONVERT(varchar(100), GETDATE(), 113): 16 05 2006 10:57:49:513 Select CONVERT(varchar(100), GETDATE(), 114): 10:57:49:547 Select CONVERT(varchar(100), GETDATE(), 120): 2006-05-16 10:57:49 Select CONVERT(varchar(100), GETDATE(), 121): 2006-05-16 10:57:49.700 Select CONVERT(varchar(100), GETDATE(), 126): 2006-05-16T10:57:49.827 Select CONVERT(varchar(100), GETDATE(), 130): 18 ???? ?????? 1427 10:57:49:907AM Select CONVERT(varchar(100), GETDATE(), 131): 18/04/1427 10:57:49:920AM","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]}]