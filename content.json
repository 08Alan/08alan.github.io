[{"title":"PowerMode","slug":"PowerMode","date":"2017-05-08T09:02:37.000Z","updated":"2017-05-09T01:58:45.000Z","comments":true,"path":"2017/05/08/PowerMode/","link":"","permalink":"https://08alan.github.io/2017/05/08/PowerMode/","excerpt":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214","text":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214選項內的參數設定如下: Parameters: Alpha Decrement AmountAlpha 增減Explosion Particle - get color from environment取得環境色彩Explosion particle color爆炸顆粒色彩Explosion Particle Randomized Color隨機產生顏色Frame Delay延遲值Gravity重力值Max Particle Count最大粒子數量Max Side Velocity最大側面速率Max Upwards Velocity最大向上速率Particles Enable顆粒啟用Screen Shake螢幕震動Start AlphaAlpha值 結論 因為Visual Studio設定為深色背景, 更改爆炸顏色卻無法更新(Bug), 不過官方Git 已註記 期待更新中 使用圖片如下：","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"VisualStudio-PerfTips消失事件簿","slug":"VisualStudio-PerfTips消失事件簿","date":"2017-05-06T08:53:02.000Z","updated":"2017-05-08T09:03:56.000Z","comments":true,"path":"2017/05/06/VisualStudio-PerfTips消失事件簿/","link":"","permalink":"https://08alan.github.io/2017/05/06/VisualStudio-PerfTips消失事件簿/","excerpt":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了","text":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了 本文 近期總是發生監看式異常的情形, 造成開發上面偌大的困擾, 於是修改了偵錯的相關設定 但PerfTips與診斷工具卻離我而去了 如圖: 雖然說專案排程進行不導致延後 不過安裝VS2015卻有新功能無法使用實在讓人心裡產生不快 終於下定決心Reset一次 想說要修不如就大修一次(修復與更新) 但此行為僅是為了更新而進行修復 必非要解決Option的個人化設定檔功能 若要還原Default可參考KingKong Bruce記事的文章 ※不過這邊要對於devenv.exe /resetuserdata小小抱怨一下 雖然我使用了重製但還是執行到一半然後跳出系統錯誤的訊息… 使用匯入匯出的重製方式也達到相同的重製效果: 結論 詳細的監看式異常使用代碼關鍵字還是無法得知, 僅能看到微軟的結論為:若發生此問題請回報於我們 不過需要的工具能回來就好 PerfTips與診斷工具通通回來了(大師兄~~~ 後記 以往於2015前的版本 為了測試系統執行耗費時間 則是必須另外撰寫Stopwatch事件 有了PerfTips後就不會有多餘的程式碼了. 123456Stopwatch sw = new Stopwatch();sw.Reset();sw.Start();//threadssw.Stop();sw.ElapsedMilliseconds;","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"SQL Server Login DefaultDatabase","slug":"SQLServerLoginDefaultDatabase","date":"2017-05-06T08:33:48.000Z","updated":"2017-05-08T09:10:22.000Z","comments":true,"path":"2017/05/06/SQLServerLoginDefaultDatabase/","link":"","permalink":"https://08alan.github.io/2017/05/06/SQLServerLoginDefaultDatabase/","excerpt":"這次遇到的問題是SQL Server登入發生異常…","text":"這次遇到的問題是SQL Server登入發生異常… 工具：SQLServerExpress2014 + SSMS2014Express 問題發生原因為資料庫遭協作人員卸載造成 但使用sa卻無法登入此DataBase??? 經查後發現測試機內DefaultDB被修改為指定資料庫 根據MSDN說明 系統預設應為Master,如下圖↓ 調整的方式有二 一、使用連接到伺服器並調整為Master 二、執行內建SP設定 EXEC sp_defaultdb &#39;sa&#39;, &#39;Master&#39;; 對於修改預設值這種事情 小弟還是會確認後並告知合作夥伴再進行設置 非必要性還是能不改就不改 以免造成不必要的工時耗費…","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"WebForm-CodeBehide動態產生動態產生htmltable","slug":"WebForm-CodeBehide動態產生動態產生htmltable","date":"2017-04-25T09:10:02.000Z","updated":"2017-04-25T10:30:40.000Z","comments":true,"path":"2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","excerpt":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷","text":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷譬如有四個人 Alan 丁小哲 陳小白 賴奕仁 以上四位的7點-12點狀態為何 13-16點狀態為何的顯示 這次使用較原始的方式&gt;&gt;&gt;畫出Html Table來進行 對小弟來說 正在趕的case較無法做技術研究 只能以最直觀且好技轉的方式來執行 但效能明顯差了許多 程式部份： 依照取得的資料來進行繪製table 首先先將主要的人員列出來 並由對人員進行applydt的狀態查詢 依照每小時每10分鐘畫出一個TD並且於該時間內進行狀態查詢 若有資料則判斷資料是否於時間內，並且顯示狀態 若不符合 則顯示其他狀態 最後將繪製好的表格字串 傳入table做屬性新增 讓我們來看看狀態取得的Method 裡面也是table的繪製字串 並且使用case進行狀態顏色的判別 執行成果： 時\\區間 狀態顯示(10分鐘為一格)","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-NPOI","slug":"WebForm-NPOI","date":"2017-04-25T09:02:11.000Z","updated":"2017-05-08T09:05:42.000Z","comments":true,"path":"2017/04/25/WebForm-NPOI/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-NPOI/","excerpt":"POI For .NET","text":"POI For .NET 函式庫： NPOI.DLL：NPOI 核心函式庫。 NPOI.DDF.DLL：NPOI 繪圖區讀寫函式庫。 NPOI.HPSF.DLL：NPOI 文件摘要資訊讀寫函式庫。 NPOI.HSSF.DLL：NPOI Excel BIFF 檔案讀寫函式庫。 NPOI.Util.DLL：NPOI 工具函式庫。 NPOI.POIFS.DLL：NPOI OLE 格式存取函式庫。 ICSharpCode.SharpZipLib.DLL：檔案壓縮函式庫。 報表匯出Method 表頭Utility 方法為傳入一個DataTable,表頭陣列,報表名稱 執行結果：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-Session","slug":"WebForm-Session","date":"2017-04-25T08:54:21.000Z","updated":"2017-04-25T09:07:08.000Z","comments":true,"path":"2017/04/25/WebForm-Session/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-Session/","excerpt":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔","text":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔就跟我們去吃飯 結完帳會得到發票與號碼牌 店家在依據號碼牌與發票上的點餐 來送餐 但在猶豫不決的點餐狀況下 跟老闆是沒有關係的 最後再送出菜單給老闆做確認 點越多店家當然越忙 這邊的店家就與Server相同 將帳號密碼的部份 傳入Dao Hash 若查詢的Dao為True則進行Session的設置 當然您可以搭配identity去獲得驗證的資料 Session的設置：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-ServiceTiers","slug":"WebForm-ServiceTiers","date":"2017-04-25T08:42:58.000Z","updated":"2017-04-25T08:47:27.000Z","comments":true,"path":"2017/04/25/WebForm-ServiceTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-ServiceTiers/","excerpt":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為","text":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為 程式的上方建立了Entity及一個Service 並且使用了查詢IronMan資料的DataTable 最後進行發信及流程完畢提醒 範例Service call DAO DAO資料串接部分就不多說了 建議參考前述的文章","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-EntityTiers","slug":"WebForm-EntityTiers","date":"2017-04-25T06:05:17.000Z","updated":"2017-04-25T06:24:49.000Z","comments":true,"path":"2017/04/25/WebForm-EntityTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-EntityTiers/","excerpt":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態","text":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態 使用時 呼叫後對其設置一個值(!注意Public的值是可以被覆蓋的) 若是於set完畢後又重新定義 則會取到最後set的值 傳進Dao進行查詢 主要目的：ADO資料查詢方式採用抽出 達到不同分層的維護性提升","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-MultiTiers","slug":"WebForm-MultiTiers","date":"2017-04-25T03:35:36.000Z","updated":"2017-04-25T03:44:07.000Z","comments":true,"path":"2017/04/25/WebForm-MultiTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-MultiTiers/","excerpt":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。","text":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。比對一下，此次開發的專案 想當然是一種Tiers的表示方式 以下展示資料基底的部分，也就是Dao Dao被稱為數據訪問對象 在這次的專案內提供了DB資料的查詢及異動 內容Region分成了QueryGet,Insert,Update,Delete 如上圖所示 這是一個簡單的查詢 包含了一個條件 並於結束後回傳一個DataTable Dao所需要的值由Entity.cs提供 為了預防資料隱碼(SQL injection)使用參數入值 最後在return 給Service層做資料使用。 此層的目的主要在於資料的讀取及判斷 並將類似的查詢使用條件作為區分 故Dao為基底提供不同頁面Service做程式面的判斷及使用。","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Javascript開始與結束日期-不足補0","slug":"Javascript開始與結束日期-不足補0","date":"2017-04-25T02:59:22.000Z","updated":"2017-04-25T03:05:32.000Z","comments":true,"path":"2017/04/25/Javascript開始與結束日期-不足補0/","link":"","permalink":"https://08alan.github.io/2017/04/25/Javascript開始與結束日期-不足補0/","excerpt":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8","text":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8 而要比較的日期內容為 立即下比較的結果 當然是失算拉!!! 12345678910//日期比較function checkDateEarlier(strStart, strEnd) &#123; var d1 = Date.parse(strStart); var d2 = Date.parse(strEnd); if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; else &#123;return true;&#125;&#125; 同上一篇的內容將日期改為數字比大小201488000000當然比201408080000來的大 但這兩個日期在人類的眼中是同一日阿!! google了一下 發現許多前輩 皆寫了method來解決此問題 通常是在Date()後方 新增一個format的方法 但 考量到code複雜 與 花費時間 只好套用其中一個較簡便的方法↓ 12345var Today = new Date();var yyyy = Today .getFullYear().toString();var mm = (Today.getMonth()+1).toString();var dd = Today.getDate().toString();var thisDate = yyyy+\"-\"+(mm[1] ? mm : \"0\"+mm[0])+\"-\"+(dd[1] ? dd : \"0\" +dd[0]) ; 經過測試後…發現較低階的瀏覽器支援js並沒有陣列式的轉換(但較高階的都可以處理完成) 造成了mm[0] 與 dd[0] 為underfined 反正目的是不足要補0 使用大絕招 if判斷補0 12345678910var today = new Date();var tdm = today.getMonth() + 1;if (tdm.toString().length == 1) &#123; tdm = \"0\" + tdm;&#125;var tdd = today.getDate()if (tdd.toString().length == 1) &#123; tdd = \"0\" + tdd;&#125;td = today.getFullYear() + '/' + tdm + '/' + tdd; 讓我們來看看輸出結果 最後拿去比較後的判斷了日期完成!!!","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"Javascript開始與結束日期比較","slug":"Javascript開始與結束日期比較","date":"2017-04-24T09:38:34.000Z","updated":"2017-04-25T02:56:22.000Z","comments":true,"path":"2017/04/24/Javascript開始與結束日期比較/","link":"","permalink":"https://08alan.github.io/2017/04/24/Javascript開始與結束日期比較/","excerpt":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來","text":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來用int的方式進行大小比較 畢竟前面一定是20XX(至少在我昇天之前QQ) 我們就從2千零一十四萬開始比大小吧!! 12345678910111213141516171819function checkDateEarlier(strStart, strEnd) &#123; var arr1 = strStart.split(\"/\"); var arr2 = strEnd.split(\"/\"); var date1 = new Date(arr1[0], parseInt(arr1[1].replace(/^0/, \"\"), 10) - 1, arr1[2]); var date2 = new Date(arr2[0], parseInt(arr2[1].replace(/^0/, \"\"), 10) - 1, arr2[2]); if (arr1[1].length == 1) arr1[1] = \"0\" + arr1[1]; if (arr1[2].length == 1) arr1[2] = \"0\" + arr1[2]; if (arr2[1].length == 1) arr2[1] = \"0\" + arr2[1]; if (arr2[2].length == 1) arr2[2] = \"0\" + arr2[2]; var d1 = arr1[0] + arr1[1] + arr1[2]; var d2 = arr2[0] + arr2[1] + arr2[2]; if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; 比較日期欄位是否小於今日 12345td = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();if (!checkDateEarlier(td, starttime.value)) &#123; alert(WarningStr); return false;&#125; 開始與結束日期做比較 1234if (!checkDateEarlier(timestart.value, timeend.value)) &#123; alert(WarningStr+\"(日期錯誤)\"); return false;&#125; 若是年份相同 比較小時 1234if (parseInt(starth) &gt; parseInt(endh)) &#123; alert(WarningStr+\"(小時錯誤)\"); return false; &#125; 若是小時相同比較分鐘 12345if (starth = endh) &#123; if (startm &gt;= endm) &#123; alert(WarningStr+ \"(分鐘錯誤)\"); return false; &#125;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"連接InfomixDB","slug":"連接InfomixDB","date":"2017-04-24T06:48:02.000Z","updated":"2017-04-24T09:34:40.000Z","comments":true,"path":"2017/04/24/連接InfomixDB/","link":"","permalink":"https://08alan.github.io/2017/04/24/連接InfomixDB/","excerpt":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接","text":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接安裝完成後 將 IBM.Data.Informix.dll 加入專案參考 連接工具使用SSMS試看看(果然不行) 這邊採用的是RazorSQL 基礎語法與SQL Server相似,進階需求除外 連接字串則需要稍作修改 1234567using IBM.Data.Informix; string conn= &quot;Host=&quot; + HOST + &quot;; &quot; + &quot;Service=&quot; + SERVICENUM + &quot;; &quot; + &quot;Server=&quot; + SERVER + &quot;; &quot; + &quot;Database=&quot; + DATABASE + &quot;; &quot; + &quot;User Id=&quot; + USER + &quot;; &quot; + &quot;Password=&quot; + PASSWORD + &quot;; &quot;; 如果您使用的是sqldatasource 記得設定資料來源管理員(ODBC) 以上應該就能連結資料庫囉","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"SQL Server - Convert日期函數","slug":"Convert日期函數","date":"2017-04-24T05:21:00.000Z","updated":"2017-04-24T09:26:09.000Z","comments":true,"path":"2017/04/24/Convert日期函數/","link":"","permalink":"https://08alan.github.io/2017/04/24/Convert日期函數/","excerpt":"代碼與格式時常忘記隨手紀錄常用的日期函數","text":"代碼與格式時常忘記隨手紀錄常用的日期函數1234567891011121314151617181920212223242526272829303132333435363738394041Select CONVERT(varchar(100), GETDATE(), 0): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 1): 05/16/06 Select CONVERT(varchar(100), GETDATE(), 2): 06.05.16 Select CONVERT(varchar(100), GETDATE(), 3): 16/05/06 Select CONVERT(varchar(100), GETDATE(), 4): 16.05.06 Select CONVERT(varchar(100), GETDATE(), 5): 16-05-06 Select CONVERT(varchar(100), GETDATE(), 6): 16 05 06 Select CONVERT(varchar(100), GETDATE(), 7): 05 16, 06 Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 Select CONVERT(varchar(100), GETDATE(), 9): 05 16 2006 10:57:46:827AM Select CONVERT(varchar(100), GETDATE(), 10): 05-16-06 Select CONVERT(varchar(100), GETDATE(), 11): 06/05/16 Select CONVERT(varchar(100), GETDATE(), 12): 060516 Select CONVERT(varchar(100), GETDATE(), 13): 16 05 2006 10:57:46:937 Select CONVERT(varchar(100), GETDATE(), 14): 10:57:46:967 Select CONVERT(varchar(100), GETDATE(), 20): 2006-05-16 10:57:47 Select CONVERT(varchar(100), GETDATE(), 21): 2006-05-16 10:57:47.157 Select CONVERT(varchar(100), GETDATE(), 22): 05/16/06 10:57:47 AM Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16 Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 Select CONVERT(varchar(100), GETDATE(), 25): 2006-05-16 10:57:47.250 Select CONVERT(varchar(100), GETDATE(), 100): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 101): 05/16/2006 Select CONVERT(varchar(100), GETDATE(), 102): 2006.05.16 Select CONVERT(varchar(100), GETDATE(), 103): 16/05/2006 Select CONVERT(varchar(100), GETDATE(), 104): 16.05.2006 Select CONVERT(varchar(100), GETDATE(), 105): 16-05-2006 Select CONVERT(varchar(100), GETDATE(), 106): 16 05 2006 Select CONVERT(varchar(100), GETDATE(), 107): 05 16, 2006 Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 Select CONVERT(varchar(100), GETDATE(), 109): 05 16 2006 10:57:49:437AM Select CONVERT(varchar(100), GETDATE(), 110): 05-16-2006 Select CONVERT(varchar(100), GETDATE(), 111): 2006/05/16 Select CONVERT(varchar(100), GETDATE(), 112): 20060516 Select CONVERT(varchar(100), GETDATE(), 113): 16 05 2006 10:57:49:513 Select CONVERT(varchar(100), GETDATE(), 114): 10:57:49:547 Select CONVERT(varchar(100), GETDATE(), 120): 2006-05-16 10:57:49 Select CONVERT(varchar(100), GETDATE(), 121): 2006-05-16 10:57:49.700 Select CONVERT(varchar(100), GETDATE(), 126): 2006-05-16T10:57:49.827 Select CONVERT(varchar(100), GETDATE(), 130): 18 ???? ?????? 1427 10:57:49:907AM Select CONVERT(varchar(100), GETDATE(), 131): 18/04/1427 10:57:49:920AM","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]}]