[{"title":"Office365-檔案儲存","slug":"Office365-檔案儲存","date":"2017-06-02T03:00:31.000Z","updated":"2017-06-02T03:16:52.000Z","comments":true,"path":"2017/06/02/Office365-檔案儲存/","link":"","permalink":"https://08alan.github.io/2017/06/02/Office365-檔案儲存/","excerpt":"Office 365 當儲存檔案時,除了本機檔案方式外, 可以選擇OneDrive或SharePoint雲端儲存方式,利用雲端儲存的便利達到檔案的一致性以及檔案連結分享的功能, 本篇將介紹Word,Excel,PowerPoint,Publisher等如何使用雲端功能達成答案開啟及上傳. 檔案開啟與儲存Office的儲存與開啟可以選擇組織內部的OneDrive或SharePoint且有檢視以上權限的文件. 若您的雲端為外部 也可以使用新增位置來進行不同網域的檔案存取.","text":"Office 365 當儲存檔案時,除了本機檔案方式外, 可以選擇OneDrive或SharePoint雲端儲存方式,利用雲端儲存的便利達到檔案的一致性以及檔案連結分享的功能, 本篇將介紹Word,Excel,PowerPoint,Publisher等如何使用雲端功能達成答案開啟及上傳. 檔案開啟與儲存Office的儲存與開啟可以選擇組織內部的OneDrive或SharePoint且有檢視以上權限的文件. 若您的雲端為外部 也可以使用新增位置來進行不同網域的檔案存取. 使用SharePoint方式開啟或儲存檔案 當使用網站開啟或儲存時會將SharePoint底下的目錄顯示,方便確認路徑. 儲存後進入SharePoint後可觀看到檔案內容(如下圖所示). 使用OneDrive儲存檔案 OneDrive會顯示出個人的雲端硬碟目錄, 儲存及顯示路徑時效能也較SharePoint好, 儲存後進入OneDrive後可觀看到檔案內容(如圖) 結語開啟舊檔您可利用上述的另存新檔功能比照, 在此篇列出Office 365雲端儲存與傳統儲存方式之不同, 其主要目的為後續文章將介紹檔案權限設置,利用設置權限達到協作與共用的目的. 而Office 365 利用雲端位置的開啟,想當然較檔案總管(Client端的模式)速度上有差異,使用上的需要多點耐心.","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-商務版","slug":"Office365-Business","date":"2017-06-01T02:42:54.000Z","updated":"2017-06-01T03:02:13.000Z","comments":true,"path":"2017/06/01/Office365-Business/","link":"","permalink":"https://08alan.github.io/2017/06/01/Office365-Business/","excerpt":"商務版Office 365 App服務較家用版豐富.除了針對IT管理人員方便設定組織化、聯絡人資訊、Exchange、Active Directory維運等,更存在大量的協作,建置工具令組織成員溝通及會議進行更為順暢.筆者在此篇淺談O365 Business APP服務,並於接下來的文章將逐一進行說明與介紹. 淺談Office 365 Business服務","text":"商務版Office 365 App服務較家用版豐富.除了針對IT管理人員方便設定組織化、聯絡人資訊、Exchange、Active Directory維運等,更存在大量的協作,建置工具令組織成員溝通及會議進行更為順暢.筆者在此篇淺談O365 Business APP服務,並於接下來的文章將逐一進行說明與介紹. 淺談Office 365 Business服務 文書處理: 傳統的Office服務,儲存檔案時可選擇OneDrive雲端硬碟分享,更可使用協作功能授權進行多人同時編輯協作,提供Online功能,使用未下載安裝的裝置也能利用網頁隨時編輯檔案,令人驚呼連連的雲端協作,網路正常情況下感覺不出Sync延遲. 郵件: 包含相關Exchange功能,郵件收發,行事曆,會議開立,工作流程等.提供Online不需額外架設網頁版本Outlook即可線上使用.相關的服務連接埠號與傳統Exchange稍有不同(POP:995,IMAP:993,SMTP:587) SharePoint: 微軟提供組織內部入口網站包含團隊協作溝通、文件庫、檔案管理等功能O365版本提供行動存取,促進團隊合作效率,以往SharePoint需要建置SharePoint Server,O365版本則改為雲端模式並將檔案儲存於OneDrive,安全性則符合企業級安全規範. OneDrive: Microsoft平台服務雲端硬碟,Business用戶每人1TB的使用資源,Office365共用及協作服務Storage,儲存檔案、個人設定檔、甚至開發專案目錄皆存放於此. OneNote: 基於OneDrive的筆記本文件,可選擇於SharePoint或OneDrive建立,雲端化的文件協作,可邀請成員共用編輯,並提供Mobile隨處存取,特殊的功能如錄製音訊,錄製影像,插入Excel,檔案附件建立等等,於團隊會議或群組討論時紀錄筆記非常方便. Publisher 雖然介面與OfficeGroup類似,但功能與使用上較為不同,主要為公司發布邀請函(EDM)或美化信件(HTML)之軟體,節省了公司需要設計人員自行撰寫HTML或製作PDF的工時. Planner 專案管理工具類似Trello,Agile board視覺化顯示各種任務指派,優勢為整合了Office365各種服務(Excel、Word、Outlook、OneDrive、OneNote等)加強團隊協作的任務指派,在企業內部的Office協作上能更有效提供效率,而非傳統的專案管理工具使用文件附加與wiki等方式操作. PowerBI: 商務分析協作工具,能夠產出儀表板、視覺化分析圖表、商業分析報表,資料獲取方面分為內容套件庫(組織發行工具,線上服務),匯入或連接(Office或檔案等匯入,Azure Database連接等)透過內建的操作及範例程式能夠串接並產生報表. Sway: 對於類似PowerPoint之簡報系列軟體,優點為極類似現代化故事述說模式.需要插入的素材(影片,照片等)使用連結取出直接採用至簡報內不需額外下載,比起PPT筆者認為更類似線上編輯工具所產生的網頁,製作完成後可使用Share功能產生網頁連結立即分享,十分方便. Create Apps: 在此將三個服務功能同時列舉原因為Flow與Dynamics皆為PowerApps所衍伸出來的功能PowerApps供設置企業內部App且不大需要撰寫程式便能做出應用程式但API的串接,相關操作的連接變更等等若非開發人員學習曲線較高.Flow可設置各事件的流程處理,Dynamics365則為APPs平台,將創建完成之PowerApps顯示於此,供人員快速取用. Teams: 目前在Office365 Online看不到這個App,若需開啟此服務,須進入Office365 Admin Center開啟,安裝方式與Office365目前暫時分家(https://teams.microsoft.com/),主要的功能與Slack等團隊協作溝通相同,與Office365組織整合的非常密切.透過組織內的聯絡人進行小組溝通平台創建,排程會議,相關的檔案Sync至Office365內,並且可建立OnNote立即記錄筆記. 結語:Office365存在著非常多的功能,目前許多項目皆為Preview版本,且發展速度非常快,各種不同的應用推出,Office365真的不僅僅是Office而已, 參考資料: Learn Office 365 for business explore-office-delve SharePoint 2016 Sway.com OneDriveDevCenter OneNoteDevCenter Microsoft Teams Downloads","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-家用版","slug":"Office365-家用版","date":"2017-06-01T02:04:42.000Z","updated":"2017-06-01T02:19:04.000Z","comments":true,"path":"2017/06/01/Office365-家用版/","link":"","permalink":"https://08alan.github.io/2017/06/01/Office365-家用版/","excerpt":"Office 365 分為家庭\\個人版,實際上能使用的功能範圍不大相同,因同時使用商務版與家庭版,登入介面時常混淆.故分為了兩篇文章來介紹兩種版本不同的使用方式. 家庭版O365 Apps:Outlook 僅App 不含Exchange功能但依舊能夠使用聯絡人與行事曆OneDrive 包含每一位使用者1TB空間Word、Excel 雲端硬碟協作Sway互動式簡報","text":"Office 365 分為家庭\\個人版,實際上能使用的功能範圍不大相同,因同時使用商務版與家庭版,登入介面時常混淆.故分為了兩篇文章來介紹兩種版本不同的使用方式. 家庭版O365 Apps:Outlook 僅App 不含Exchange功能但依舊能夠使用聯絡人與行事曆OneDrive 包含每一位使用者1TB空間Word、Excel 雲端硬碟協作Sway互動式簡報 帳戶管理:1.費用提醒若您為每月訂閱者,Office 365 會建議切換為每年付款,但節省的金額貌似算錯了正確的金額為一年3190,每月訂閱為320,實際上一年節省650元 2.安裝資訊PC、MAC、Windows安裝包含電腦名稱、安裝日期、使用者資訊,且供管理人員隨時停用 3.其他裝置 4.共用Office 365家用版的O365可供5位使用者使用,且擁有PC上安裝Office應用程式,Mobile安裝,OneDrive1TB的權限. 您可以使用Emil邀請,設置Microsoft家庭成員,Facebook,Link傳送以上方式皆可新增人員訂閱權益,管理人員設定完畢後,User端會接收到一串Officel 365 之邀請連結提供下載與使用確認. 5.服務及訂閱訂閱頁面包含O365安裝及設定、帳單紀錄、訂閱取消、方案更換、付款方式更換等功能. 提醒：若您使用的Office365包含商務版及家用版這將導致登入較難分辨入口的正確(LoginPortal為不同的入口 但依照UI較難分辨差異).建議家用版的使用者可以登入Microsoft後尋找訂閱資訊進入登入.或者登入服務後再選取帳戶轉至帳戶入口除雲端管理檔案功能外,家用版使用上較與傳統使用方式相似,價位也相對便宜年訂閱3190供五位使用者使用若僅需較簡易的Office功能可以參考家用版Office.以下為正確登入時的畫面: 若進入到Office 365 Business登入畫面輸入家用版時將顯示錯誤訊息","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"Office365-版本選擇","slug":"Office365-版本選擇","date":"2017-05-30T08:25:45.000Z","updated":"2017-05-30T12:29:59.000Z","comments":true,"path":"2017/05/30/Office365-版本選擇/","link":"","permalink":"https://08alan.github.io/2017/05/30/Office365-版本選擇/","excerpt":"Office365是微軟針對個人、家庭、企業內部組織等不同需求之協作與生產工具, 包含檔案收納,報表編寫,郵件收發,團隊協作等等的功能(近期更推出了Teams團隊協作) 除了家庭與個人版本外,Business依照不同的組織模式更提供不同的解決方案. 版本選擇:不同的使用習慣可以視您的需求選取家用或Business版本 兩版本最大的不同為Business提供的商務功能(Active Directory,Exchange Online,商務用Skype,商務用OneDrive…)","text":"Office365是微軟針對個人、家庭、企業內部組織等不同需求之協作與生產工具, 包含檔案收納,報表編寫,郵件收發,團隊協作等等的功能(近期更推出了Teams團隊協作) 除了家庭與個人版本外,Business依照不同的組織模式更提供不同的解決方案. 版本選擇:不同的使用習慣可以視您的需求選取家用或Business版本 兩版本最大的不同為Business提供的商務功能(Active Directory,Exchange Online,商務用Skype,商務用OneDrive…) 家用/個人版: 企業及商務版: Office 365雲端優勢: 隨處存取 - 跨平台支援,實現移動辦公 線上更新 - 版本持續升級,與買斷&amp;舊版本不同,(EX:不需再額外Office 2018..20..) 方便管理 - Web UI 管理平台,讓IT管理員視覺化管理,節省機器與人力成本 團隊協作 - 文件儲存Onedrive,協作平台Teams 官方支援 - 微軟全年無休Support 資料安全 - 數據預防遺失 Office 365試用:家用版Office 365提供30天的免費試用 官網上小小提醒如下 購買時必須使用信用卡。您可以免費試用 1 個月，之後每月只需支付 NT$320.00，就能使用Office 365 家用版，而且可以隨時取消。 內含Excel,Word,Outlook…等 且與正式版相同可安裝最多五台PC,Tab,Mobile Office 365 Try Office 365 Dev Center 試用 Business 訂閱:若為開發人員 可使用Dev Center 內含1年的免費訂閱 並獲得專業加強版的Office 365產品訂閱 申請成為測試人員:填寫Office 365 Developer Program (圖2) 可協助測試最新Preview版軟體 依照Office回報機制或至GitHub進行反饋 協助軟體發展 Office Dev Center 參考資料:Office365Taiwan Microsoft licensing Office365 VS Office 2016 Office Dev Center","categories":[],"tags":[{"name":"Office 365","slug":"Office-365","permalink":"https://08alan.github.io/tags/Office-365/"}]},{"title":"SQLDataSource於後端取得Parameters Value","slug":"SQLDataSource於後端取得ParametersValue","date":"2017-05-29T11:11:57.000Z","updated":"2017-05-29T11:19:56.000Z","comments":true,"path":"2017/05/29/SQLDataSource於後端取得ParametersValue/","link":"","permalink":"https://08alan.github.io/2017/05/29/SQLDataSource於後端取得ParametersValue/","excerpt":"今日於論壇上看到了一位開發人員提出的問題 [C#] 請問如何看到 SqlDataSource 的 SelectCommand 代換參數值後的結果？ 因平常WebForm專案的維護皆使用ADO.NET進行,故直接聯想到SelectParameters的方式, 沒想到這樣的調用方式竟然個誤人子弟的回覆,趕緊進行觀念排除… 是說 太久沒用的技術還是回顧一下再回覆會比較好 SqlDataSource設置 於前端頁面aspx建立一個DropDownList 並串接SqlDataSource並設定SelectCommand (您可以點選設定資料來源來進行↓)","text":"今日於論壇上看到了一位開發人員提出的問題 [C#] 請問如何看到 SqlDataSource 的 SelectCommand 代換參數值後的結果？ 因平常WebForm專案的維護皆使用ADO.NET進行,故直接聯想到SelectParameters的方式, 沒想到這樣的調用方式竟然個誤人子弟的回覆,趕緊進行觀念排除… 是說 太久沒用的技術還是回顧一下再回覆會比較好 SqlDataSource設置 於前端頁面aspx建立一個DropDownList 並串接SqlDataSource並設定SelectCommand (您可以點選設定資料來源來進行↓) 設定完成後aspx code inline 如下所示: 12345678&lt;asp:DropDownList ID=\"DropDownList1\" CssClass=\"form-control\" runat=\"server\" DataSourceID=\"SqlDataSource1\" DataTextField=\"UserName\" DataValueField=\"AccountID\"&gt;&lt;/asp:DropDownList&gt;&lt;asp:SqlDataSource ID=\"SqlDataSource1\" runat=\"server\" ConnectionString=\"&lt;%$ ConnectionStrings:WelfareConnectionString %&gt;\" SelectCommand=\"Select * From Members WHERE UserName = @Name\" OnSelected=\"SqlDataSource1_Selected\" OnSelecting=\"SqlDataSource1_Selecting\"&gt; &lt;SelectParameters&gt; &lt;asp:Parameter Type=\"String\" Name=\"Name\" DefaultValue=\"alan.liu\" /&gt; &lt;/SelectParameters&gt;&lt;/asp:SqlDataSource&gt; 並在SqlDataSource Selecting事件內加入DefaultValue(您也可以直接寫在前端SqlDataSource的Attribute DefaultValue內) 1234protected void SqlDataSource1_Selecting(object sender, SqlDataSourceSelectingEventArgs e)&#123; SqlDataSource1.SelectParameters[\"Name\"].DefaultValue = \"Alan.Liu\";&#125; 接下來抓取送入資料連線的參數值(這邊就不新增值 僅抓取送入sql的DefaultValue即可) 經由eventArgs Command獲取(MSDN參考) 1234567protected void SqlDataSource1_Selected(object sender, SqlDataSourceStatusEventArgs e)&#123; foreach (DbParameter param in e.Command.Parameters) &#123; Debug.Write(param.Value); &#125;&#125; 結論 若新專案非得使用WebForm開發 個人還是提倡多層架構 DAO to Service DAO部分 可以使用ADO.NET 或 EF進行會比較活 而這些老舊的控制項 就隨他去吧…","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Datatable Insert To SQL Server","slug":"DatatableInsertToSQLServer","date":"2017-05-29T10:46:43.000Z","updated":"2017-05-29T11:08:55.000Z","comments":true,"path":"2017/05/29/DatatableInsertToSQLServer/","link":"","permalink":"https://08alan.github.io/2017/05/29/DatatableInsertToSQLServer/","excerpt":"ADO.NET大量資料新增至SQL Server ,除了迴圈處理外 還可使用Datatable 當成parameter T-SQL定義資料類型:1234CREATE TYPE [dbo].[TrackingNumberType] AS TABLE( [ZRMANO][nvarchar](50) not null ,[POSNR][nvarchar](10) null)","text":"ADO.NET大量資料新增至SQL Server ,除了迴圈處理外 還可使用Datatable 當成parameter T-SQL定義資料類型:1234CREATE TYPE [dbo].[TrackingNumberType] AS TABLE( [ZRMANO][nvarchar](50) not null ,[POSNR][nvarchar](10) null) Stored Procedure:12345678910CREATE PROCEDURE [dbo].[InsertTrackingNumberTable] @TrackingNumberType TrackingNumberType readonlyASBEGININSERT INTO [dbo].ttTrackingNumber SELECT [ZRMANO] ,[POSNR] FROM @TrackingNumberTypeEND C# Behide Code:12345678910111213141516171819DBInit();StringBuilder sql = new StringBuilder();sql.AppendLine(\"EXEC InsertTrackingNumberTable @TrackingNumberTypeParam\");dt.TableName = \"TrackingNumberType\";SqlParameter parameter = new SqlParameter();parameter.ParameterName = \"@TrackingNumberTypeParam\";parameter.TypeName = \"dbo.TrackingNumberType\";//parameter.SqlDbType = System.Data.SqlDbType.Structured;parameter.Value = dt;cm.Parameters.Add(parameter);try&#123; cm.CommandText = sql.ToString(); count = cm.ExecuteNonQuery();&#125;catch (Exception ex)&#123; throw ex;&#125; 執行效能: 1000筆測試 約10-40毫秒","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Hi!TypeScript","slug":"hitypescript","date":"2017-05-09T02:34:48.000Z","updated":"2017-05-29T10:48:33.000Z","comments":true,"path":"2017/05/09/hitypescript/","link":"","permalink":"https://08alan.github.io/2017/05/09/hitypescript/","excerpt":"前言 目前工作上較偏向後端工程,內容多為DBA或WebAPI產出 前端熱血小宇宙不停呼喚著(別想用Javascript + Jquery總是敷衍我們!!!) 這一兩年前端的發展迅速 Knockout、Angular、TypeScript、React…等 對於C#較有概念 強型別的方式可能會比較容易上手 開始學習 TypeScript 吧!","text":"前言 目前工作上較偏向後端工程,內容多為DBA或WebAPI產出 前端熱血小宇宙不停呼喚著(別想用Javascript + Jquery總是敷衍我們!!!) 這一兩年前端的發展迅速 Knockout、Angular、TypeScript、React…等 對於C#較有概念 強型別的方式可能會比較容易上手 開始學習 TypeScript 吧! 工具 Visual Studio Enterprise 2015 Visual Studio Code 1.0.0 .NET Framework 4.6.1 內文 利用Visual Studio新增TypeScript專案 當然您也可以使用npm cli 或 web pack進行 範本建立後可見CSS,TS,Index ts Template內容為日期時間顯示 接著進行Start()內setInterval Function撰寫方式修改 123456start() &#123; this.timerToken = setInterval(function () &#123; this.span.innerHTML = new Date().toUTCString() &#125;, 500); &#125; 再度執行網頁後發現時間並無更新 開啟開發者工具查看 接著查看App.js (js為ts編譯出來的執行檔 可由map內查看map config) 原先的Function撰寫方式 經過編譯後與修改過後的無不同 1234Greeter.prototype.start = function () &#123; var _this = this; this.timerToken = setInterval(function () &#123; return _this.span.innerHTML = new Date().toUTCString(); &#125;, 500); &#125;; 最後將Class套用至Div內 ts: 12345window.onload = () =&gt; &#123; var el = document.getElementById('content'); var greeter = new Greeter(el); greeter.start();&#125;; js(差異僅有上述說明之function編譯後的撰寫方式): 12345window.onload = function () &#123; var el = document.getElementById('content'); var greeter = new Greeter(el); greeter.start();&#125;; 心得 TypeScript Call Class 並設立物件架構,實在是與C# 或 Java非常的類似, 若本身有JS語法+多層架構概念 應該會較好上手","categories":[],"tags":[{"name":"Typescript","slug":"Typescript","permalink":"https://08alan.github.io/tags/Typescript/"}]},{"title":"PowerMode","slug":"PowerMode","date":"2017-05-08T09:02:37.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/05/08/PowerMode/","link":"","permalink":"https://08alan.github.io/2017/05/08/PowerMode/","excerpt":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214","text":"前言 前陣子早已關注ATMO PowerMode 隔沒多久VS2015版本就問世了,立馬安裝BJ4. 內文 Power Mode 載點如下 https://visualstudiogallery.msdn.microsoft.com/936788cc-7213-4d48-93ae-045694781214選項內的參數設定如下: Parameters: Alpha Decrement AmountAlpha 增減Explosion Particle - get color from environment取得環境色彩Explosion particle color爆炸顆粒色彩Explosion Particle Randomized Color隨機產生顏色Frame Delay延遲值Gravity重力值Max Particle Count最大粒子數量Max Side Velocity最大側面速率Max Upwards Velocity最大向上速率Particles Enable顆粒啟用Screen Shake螢幕震動Start AlphaAlpha值 結論 因為Visual Studio設定為深色背景, 更改爆炸顏色卻無法更新(Bug), 不過官方Git 已註記 期待更新中 使用圖片如下：","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"VisualStudio-PerfTips消失事件簿","slug":"VisualStudio-PerfTips消失事件簿","date":"2017-05-06T08:53:02.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/05/06/VisualStudio-PerfTips消失事件簿/","link":"","permalink":"https://08alan.github.io/2017/05/06/VisualStudio-PerfTips消失事件簿/","excerpt":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了","text":"前言 由 VS2015 Preview 至目前於開發機安裝Enterprise RTM已有一段時間 老早就被新的功能所洗腦 還沒安裝的朋友可以詳見_Visual Studio 2015 的新功能 本週調整了選項設定後…PerfTips的功能卻消失了 本文 近期總是發生監看式異常的情形, 造成開發上面偌大的困擾, 於是修改了偵錯的相關設定 但PerfTips與診斷工具卻離我而去了 如圖: 雖然說專案排程進行不導致延後 不過安裝VS2015卻有新功能無法使用實在讓人心裡產生不快 終於下定決心Reset一次 想說要修不如就大修一次(修復與更新) 但此行為僅是為了更新而進行修復 必非要解決Option的個人化設定檔功能 若要還原Default可參考KingKong Bruce記事的文章 ※不過這邊要對於devenv.exe /resetuserdata小小抱怨一下 雖然我使用了重製但還是執行到一半然後跳出系統錯誤的訊息… 使用匯入匯出的重製方式也達到相同的重製效果: 結論 詳細的監看式異常使用代碼關鍵字還是無法得知, 僅能看到微軟的結論為:若發生此問題請回報於我們 不過需要的工具能回來就好 PerfTips與診斷工具通通回來了(大師兄~~~ 後記 以往於2015前的版本 為了測試系統執行耗費時間 則是必須另外撰寫Stopwatch事件 有了PerfTips後就不會有多餘的程式碼了. 123456Stopwatch sw = new Stopwatch();sw.Reset();sw.Start();//threadssw.Stop();sw.ElapsedMilliseconds;","categories":[],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://08alan.github.io/tags/Visual-Studio/"}]},{"title":"SQL Server Login DefaultDatabase","slug":"SQLServerLoginDefaultDatabase","date":"2017-05-06T08:33:48.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/05/06/SQLServerLoginDefaultDatabase/","link":"","permalink":"https://08alan.github.io/2017/05/06/SQLServerLoginDefaultDatabase/","excerpt":"這次遇到的問題是SQL Server登入發生異常…","text":"這次遇到的問題是SQL Server登入發生異常… 工具：SQLServerExpress2014 + SSMS2014Express 問題發生原因為資料庫遭協作人員卸載造成 但使用sa卻無法登入此DataBase??? 經查後發現測試機內DefaultDB被修改為指定資料庫 根據MSDN說明 系統預設應為Master,如下圖↓ 調整的方式有二 一、使用連接到伺服器並調整為Master 二、執行內建SP設定 EXEC sp_defaultdb &#39;sa&#39;, &#39;Master&#39;; 對於修改預設值這種事情 小弟還是會確認後並告知合作夥伴再進行設置 非必要性還是能不改就不改 以免造成不必要的工時耗費…","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"WebForm-CodeBehide動態產生動態產生htmltable","slug":"WebForm-CodeBehide動態產生動態產生htmltable","date":"2017-04-25T09:10:02.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-CodeBehide動態產生動態產生htmltable/","excerpt":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷","text":"這次的需求為製作一個類似電影院的訂位顯示 但不同的是每一row皆為一筆資料並且於每筆資料內進行時間內狀態的判斷譬如有四個人 Alan 丁小哲 陳小白 賴奕仁 以上四位的7點-12點狀態為何 13-16點狀態為何的顯示 這次使用較原始的方式&gt;&gt;&gt;畫出Html Table來進行 對小弟來說 正在趕的case較無法做技術研究 只能以最直觀且好技轉的方式來執行 但效能明顯差了許多 程式部份： 依照取得的資料來進行繪製table 首先先將主要的人員列出來 並由對人員進行applydt的狀態查詢 依照每小時每10分鐘畫出一個TD並且於該時間內進行狀態查詢 若有資料則判斷資料是否於時間內，並且顯示狀態 若不符合 則顯示其他狀態 最後將繪製好的表格字串 傳入table做屬性新增 讓我們來看看狀態取得的Method 裡面也是table的繪製字串 並且使用case進行狀態顏色的判別 執行成果： 時\\區間 狀態顯示(10分鐘為一格)","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-NPOI","slug":"WebForm-NPOI","date":"2017-04-25T09:02:11.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-NPOI/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-NPOI/","excerpt":"POI For .NET","text":"POI For .NET 函式庫： NPOI.DLL：NPOI 核心函式庫。 NPOI.DDF.DLL：NPOI 繪圖區讀寫函式庫。 NPOI.HPSF.DLL：NPOI 文件摘要資訊讀寫函式庫。 NPOI.HSSF.DLL：NPOI Excel BIFF 檔案讀寫函式庫。 NPOI.Util.DLL：NPOI 工具函式庫。 NPOI.POIFS.DLL：NPOI OLE 格式存取函式庫。 ICSharpCode.SharpZipLib.DLL：檔案壓縮函式庫。 報表匯出Method 表頭Utility 方法為傳入一個DataTable,表頭陣列,報表名稱 執行結果：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-Session","slug":"WebForm-Session","date":"2017-04-25T08:54:21.000Z","updated":"2017-05-12T07:27:15.000Z","comments":true,"path":"2017/04/25/WebForm-Session/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-Session/","excerpt":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔","text":"Session的技術被Web廣泛的使用 是因為Client進行的動作並不會隨時隨地的傳回Server端 而對Server端進行記憶的資料 所以大量使用Session會造成Server端的負擔就跟我們去吃飯 結完帳會得到發票與號碼牌 店家在依據號碼牌與發票上的點餐 來送餐 但在猶豫不決的點餐狀況下 跟老闆是沒有關係的 最後再送出菜單給老闆做確認 點越多店家當然越忙 這邊的店家就與Server相同 將帳號密碼的部份 傳入Dao Hash 若查詢的Dao為True則進行Session的設置 當然您可以搭配identity去獲得驗證的資料 Session的設置：","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-ServiceTiers","slug":"WebForm-ServiceTiers","date":"2017-04-25T08:42:58.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-ServiceTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-ServiceTiers/","excerpt":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為","text":"Service 在此專案扮演Dao與Behind Code的橋樑 更將雜亂的運算子及判斷式一併納入自身管理 讓Behind Code能夠乾淨簡潔的知道頁面上所執行的功能為何 以下是一個發文行為 程式的上方建立了Entity及一個Service 並且使用了查詢IronMan資料的DataTable 最後進行發信及流程完畢提醒 範例Service call DAO DAO資料串接部分就不多說了 建議參考前述的文章","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-EntityTiers","slug":"WebForm-EntityTiers","date":"2017-04-25T06:05:17.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-EntityTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-EntityTiers/","excerpt":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態","text":"Entity在此專案的架構中 可以是一個文字.數字…甚至是參數等等的型態表現 使用時，可以對定義好的Entity設置或取出一個值(Get or Set) 來達到程式所需要的目的 假設我們定義一個Entity 裡面包含了參賽者姓名，編號 姓名部分的型態為String,編號採用int數字型態 使用時 呼叫後對其設置一個值(!注意Public的值是可以被覆蓋的) 若是於set完畢後又重新定義 則會取到最後set的值 傳進Dao進行查詢 主要目的：ADO資料查詢方式採用抽出 達到不同分層的維護性提升","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"WebForm-MultiTiers","slug":"WebForm-MultiTiers","date":"2017-04-25T03:35:36.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/WebForm-MultiTiers/","link":"","permalink":"https://08alan.github.io/2017/04/25/WebForm-MultiTiers/","excerpt":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。","text":"多層式架構(Multi Tiers) 也稱為分散式架構或多層應用程式 基礎的多層式架構大多包含了&gt;展示(網頁的前端)，中繼(Code的判斷邏輯)，資料(Source Data) 這種開發模式的優點不僅使網站變得管理方便，迅速 更可將網站模組化，於修改其他階層時較不易受影響。比對一下，此次開發的專案 想當然是一種Tiers的表示方式 以下展示資料基底的部分，也就是Dao Dao被稱為數據訪問對象 在這次的專案內提供了DB資料的查詢及異動 內容Region分成了QueryGet,Insert,Update,Delete 如上圖所示 這是一個簡單的查詢 包含了一個條件 並於結束後回傳一個DataTable Dao所需要的值由Entity.cs提供 為了預防資料隱碼(SQL injection)使用參數入值 最後在return 給Service層做資料使用。 此層的目的主要在於資料的讀取及判斷 並將類似的查詢使用條件作為區分 故Dao為基底提供不同頁面Service做程式面的判斷及使用。","categories":[],"tags":[{"name":"ASP.NET WebForm","slug":"ASP-NET-WebForm","permalink":"https://08alan.github.io/tags/ASP-NET-WebForm/"}]},{"title":"Javascript開始與結束日期-不足補0","slug":"Javascript開始與結束日期-不足補0","date":"2017-04-25T02:59:22.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/25/Javascript開始與結束日期-不足補0/","link":"","permalink":"https://08alan.github.io/2017/04/25/Javascript開始與結束日期-不足補0/","excerpt":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8","text":"根據檢舉達人舉發 先前開發的日期比較出錯，於是立刻想到邏輯可能沒判斷完成 問題發生如下↓ 123var today = new Date();td = today.getFullYear() + '/' + today.getMonth() + 1; + '/' + today.getDate();//輸出結果 &gt;&gt;2014/8/8 而要比較的日期內容為 立即下比較的結果 當然是失算拉!!! 12345678910//日期比較function checkDateEarlier(strStart, strEnd) &#123; var d1 = Date.parse(strStart); var d2 = Date.parse(strEnd); if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; else &#123;return true;&#125;&#125; 同上一篇的內容將日期改為數字比大小201488000000當然比201408080000來的大 但這兩個日期在人類的眼中是同一日阿!! google了一下 發現許多前輩 皆寫了method來解決此問題 通常是在Date()後方 新增一個format的方法 但 考量到code複雜 與 花費時間 只好套用其中一個較簡便的方法↓ 12345var Today = new Date();var yyyy = Today .getFullYear().toString();var mm = (Today.getMonth()+1).toString();var dd = Today.getDate().toString();var thisDate = yyyy+\"-\"+(mm[1] ? mm : \"0\"+mm[0])+\"-\"+(dd[1] ? dd : \"0\" +dd[0]) ; 經過測試後…發現較低階的瀏覽器支援js並沒有陣列式的轉換(但較高階的都可以處理完成) 造成了mm[0] 與 dd[0] 為underfined 反正目的是不足要補0 使用大絕招 if判斷補0 12345678910var today = new Date();var tdm = today.getMonth() + 1;if (tdm.toString().length == 1) &#123; tdm = \"0\" + tdm;&#125;var tdd = today.getDate()if (tdd.toString().length == 1) &#123; tdd = \"0\" + tdd;&#125;td = today.getFullYear() + '/' + tdm + '/' + tdd; 讓我們來看看輸出結果 最後拿去比較後的判斷了日期完成!!!","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"Javascript開始與結束日期比較","slug":"Javascript開始與結束日期比較","date":"2017-04-24T09:38:34.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/24/Javascript開始與結束日期比較/","link":"","permalink":"https://08alan.github.io/2017/04/24/Javascript開始與結束日期比較/","excerpt":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來","text":"最近專案遇到了一個比較日期開始與結束的功能 若不用套件使用原生js還沒玩過 ~ 讓我們繼續看下去 雖然DataDiff是很方便的語法 但這次使用土法煉鋼的方式 將日期函式用陣列來比較 split(&quot;/&quot;)將日期做分離 得到arr[1] 年, arr[2] 月, arr[3] 日 接著將date1,date2 年月日都串起來用int的方式進行大小比較 畢竟前面一定是20XX(至少在我昇天之前QQ) 我們就從2千零一十四萬開始比大小吧!! 12345678910111213141516171819function checkDateEarlier(strStart, strEnd) &#123; var arr1 = strStart.split(\"/\"); var arr2 = strEnd.split(\"/\"); var date1 = new Date(arr1[0], parseInt(arr1[1].replace(/^0/, \"\"), 10) - 1, arr1[2]); var date2 = new Date(arr2[0], parseInt(arr2[1].replace(/^0/, \"\"), 10) - 1, arr2[2]); if (arr1[1].length == 1) arr1[1] = \"0\" + arr1[1]; if (arr1[2].length == 1) arr1[2] = \"0\" + arr1[2]; if (arr2[1].length == 1) arr2[1] = \"0\" + arr2[1]; if (arr2[2].length == 1) arr2[2] = \"0\" + arr2[2]; var d1 = arr1[0] + arr1[1] + arr1[2]; var d2 = arr2[0] + arr2[1] + arr2[2]; if (parseInt(d1, 10) &gt; parseInt(d2, 10)) &#123; return false; &#125; 比較日期欄位是否小於今日 12345td = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();if (!checkDateEarlier(td, starttime.value)) &#123; alert(WarningStr); return false;&#125; 開始與結束日期做比較 1234if (!checkDateEarlier(timestart.value, timeend.value)) &#123; alert(WarningStr+\"(日期錯誤)\"); return false;&#125; 若是年份相同 比較小時 1234if (parseInt(starth) &gt; parseInt(endh)) &#123; alert(WarningStr+\"(小時錯誤)\"); return false; &#125; 若是小時相同比較分鐘 12345if (starth = endh) &#123; if (startm &gt;= endm) &#123; alert(WarningStr+ \"(分鐘錯誤)\"); return false; &#125;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://08alan.github.io/tags/Javascript/"}]},{"title":"連接InfomixDB","slug":"連接InfomixDB","date":"2017-04-24T06:48:02.000Z","updated":"2017-05-12T07:26:24.000Z","comments":true,"path":"2017/04/24/連接InfomixDB/","link":"","permalink":"https://08alan.github.io/2017/04/24/連接InfomixDB/","excerpt":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接","text":"近期收到一需求,採用localDB進行開發 搞定需求後,開始進行資料庫建置… 沒想到 竟然是沒接觸過的 IBM infomix 瞬間Orz Informix相關資料較少 查詢資料與測試花不少時間 在此進行筆記 先到 IBM 官網下載Informix Client Software Development Kit (Client SDK) 這邊要注意Server的系統位元組會影響連接安裝完成後 將 IBM.Data.Informix.dll 加入專案參考 連接工具使用SSMS試看看(果然不行) 這邊採用的是RazorSQL 基礎語法與SQL Server相似,進階需求除外 連接字串則需要稍作修改 1234567using IBM.Data.Informix; string conn= &quot;Host=&quot; + HOST + &quot;; &quot; + &quot;Service=&quot; + SERVICENUM + &quot;; &quot; + &quot;Server=&quot; + SERVER + &quot;; &quot; + &quot;Database=&quot; + DATABASE + &quot;; &quot; + &quot;User Id=&quot; + USER + &quot;; &quot; + &quot;Password=&quot; + PASSWORD + &quot;; &quot;; 如果您使用的是sqldatasource 記得設定資料來源管理員(ODBC) 以上應該就能連結資料庫囉","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]},{"title":"SQL Server - Convert日期函數","slug":"Convert日期函數","date":"2017-04-24T05:21:00.000Z","updated":"2017-05-12T07:27:20.000Z","comments":true,"path":"2017/04/24/Convert日期函數/","link":"","permalink":"https://08alan.github.io/2017/04/24/Convert日期函數/","excerpt":"代碼與格式時常忘記隨手紀錄常用的日期函數","text":"代碼與格式時常忘記隨手紀錄常用的日期函數1234567891011121314151617181920212223242526272829303132333435363738394041Select CONVERT(varchar(100), GETDATE(), 0): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 1): 05/16/06 Select CONVERT(varchar(100), GETDATE(), 2): 06.05.16 Select CONVERT(varchar(100), GETDATE(), 3): 16/05/06 Select CONVERT(varchar(100), GETDATE(), 4): 16.05.06 Select CONVERT(varchar(100), GETDATE(), 5): 16-05-06 Select CONVERT(varchar(100), GETDATE(), 6): 16 05 06 Select CONVERT(varchar(100), GETDATE(), 7): 05 16, 06 Select CONVERT(varchar(100), GETDATE(), 8): 10:57:46 Select CONVERT(varchar(100), GETDATE(), 9): 05 16 2006 10:57:46:827AM Select CONVERT(varchar(100), GETDATE(), 10): 05-16-06 Select CONVERT(varchar(100), GETDATE(), 11): 06/05/16 Select CONVERT(varchar(100), GETDATE(), 12): 060516 Select CONVERT(varchar(100), GETDATE(), 13): 16 05 2006 10:57:46:937 Select CONVERT(varchar(100), GETDATE(), 14): 10:57:46:967 Select CONVERT(varchar(100), GETDATE(), 20): 2006-05-16 10:57:47 Select CONVERT(varchar(100), GETDATE(), 21): 2006-05-16 10:57:47.157 Select CONVERT(varchar(100), GETDATE(), 22): 05/16/06 10:57:47 AM Select CONVERT(varchar(100), GETDATE(), 23): 2006-05-16 Select CONVERT(varchar(100), GETDATE(), 24): 10:57:47 Select CONVERT(varchar(100), GETDATE(), 25): 2006-05-16 10:57:47.250 Select CONVERT(varchar(100), GETDATE(), 100): 05 16 2006 10:57AM Select CONVERT(varchar(100), GETDATE(), 101): 05/16/2006 Select CONVERT(varchar(100), GETDATE(), 102): 2006.05.16 Select CONVERT(varchar(100), GETDATE(), 103): 16/05/2006 Select CONVERT(varchar(100), GETDATE(), 104): 16.05.2006 Select CONVERT(varchar(100), GETDATE(), 105): 16-05-2006 Select CONVERT(varchar(100), GETDATE(), 106): 16 05 2006 Select CONVERT(varchar(100), GETDATE(), 107): 05 16, 2006 Select CONVERT(varchar(100), GETDATE(), 108): 10:57:49 Select CONVERT(varchar(100), GETDATE(), 109): 05 16 2006 10:57:49:437AM Select CONVERT(varchar(100), GETDATE(), 110): 05-16-2006 Select CONVERT(varchar(100), GETDATE(), 111): 2006/05/16 Select CONVERT(varchar(100), GETDATE(), 112): 20060516 Select CONVERT(varchar(100), GETDATE(), 113): 16 05 2006 10:57:49:513 Select CONVERT(varchar(100), GETDATE(), 114): 10:57:49:547 Select CONVERT(varchar(100), GETDATE(), 120): 2006-05-16 10:57:49 Select CONVERT(varchar(100), GETDATE(), 121): 2006-05-16 10:57:49.700 Select CONVERT(varchar(100), GETDATE(), 126): 2006-05-16T10:57:49.827 Select CONVERT(varchar(100), GETDATE(), 130): 18 ???? ?????? 1427 10:57:49:907AM Select CONVERT(varchar(100), GETDATE(), 131): 18/04/1427 10:57:49:920AM","categories":[],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://08alan.github.io/tags/SQL-Server/"}]}]